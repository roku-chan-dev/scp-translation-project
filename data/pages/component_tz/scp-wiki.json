{
  "title": "Timezone Converter",
  "content": "[[iftags +component]]\n\n[[include :scp-wiki:component:croqstyle -=- ]]\n\n[[module CSS]]\ntd { vertical-align: top; }\n.options table.wiki-content-table td { border: none; padding: 0.7em 1em; }\n[[/module]]\n\n[[div style=\"border: 1px solid #ddd; padding: 1em;\"]]\nThis is a component that displays a given time in the reader's timezone. It's designed for timed events e.g. contests, that might show a time like \"4:00 PM EST\" - not everyone is in the EST timezone and they would have to go look up when exactly that is.\n\nThe reader's timezone will be automatically calculated. All you need to do is input the timezone of the time you want on the page.\n\nIf your timezone matches the reader's timezone, you can show different text or make the component not appear at all.\n\n[[=]]\n[http://scp-sandbox-3.wikidot.com/tz-demo >>> DEMO <<<]\n[[/=]]\n\n+ Usage\n\nOn any wiki:\n\n[[div class=\"code terminal\"]]\n##var(--c-keyword)|[[####var(--c-builtin)|include## ##var(--c-symbol)|:scp-wiki:component:tz##\n##var(--c-keyword)||## ##var(--c-builtin)|time####var(--c-keyword)| = ####var(--c-string)|18:00##\n##var(--c-keyword)||## ##var(--c-builtin)|tz####var(--c-keyword)| = ####var(--c-string)|EST##\n##var(--c-keyword)||## ##var(--c-builtin)|text_if_tz_same####var(--c-keyword)| = ####var(--c-string)|Your timezone is EST.##\n##var(--c-keyword)|]]##\n[[/div]]\n\nThe following settings are supported. To get the default value of an optional setting, don't add the setting at all.\n\n[[div class=\"options\"]]\n|| **time** || The time of the event in 24-hour time (e.g. 18:00). ||\n|| **//tz//** _\n//(Optional)// || The timezone of the time that you're entering. You can use [https://en.wikipedia.org/wiki/List_of_time_zone_abbreviations abbreviations] (e.g. UTC, GMT, EST) or [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List location codes] (e.g. America/New_York, Europe/London). _\n//Default value: UTC// ||\n[!-- || **//date//** _\n//(Optional)// || The date of the event in ISO format: YYYY-MM-DD. _\nThe date might be used at some point to calculate \"time until\" stuff, but right now it's unused. _\n//Default value: today// || --]\n|| **//text//** _\n//(Optional)// || The text used to display the original time (that you provided) and the reader's local time. _\n _\nThe default text assumes that this component is placed beneath a time with some fixed timezone, but you can change the text to tweak the context as needed, e.g. by omitting the details for the original time. _\n _\n//Default value: \"${timeOriginal} ${tzOriginal} is ${timeLocal} ${tzLocal}.\"// ||\n|| **//text_if_tz_same//** _\n//(Optional)// || Text to show if the timezone is the same as the user's timezone. _\nDefault: nothing (the component will hide itself completely) ||\n|| **//css//** _\n//(Optional)// || CSS to style the interior of the component's iframe. To style the exterior, use a standard CSS module. _\n _\nE.g. for use on a page with a dark theme, try {{.tz { color: white }}} ||\n[[/div]]\n\nPlease note there is some built-in human-error correction for Daylight Saving Time:\n* EST, EDT and ET are treated as America/New_York\n* BST is treated as Europe/London\n\n[[/div]]\n\n-----\n\n[[/iftags]]\n\n[[div_ class=\"component-tz__wrapper timezone-thingy\"]]\n[[html]]\n<head>\n  <script type=\"text/javascript\">\n    // These inputs are in the [[html]] block so that they get interpolated by component parametrisation. The ones in the local--code JS won't be.\n    const inputs = {\n      time: \"{$time}\",\n      tz: \"{$tz}\",\n      text: \"{$text}\",\n      textSame: \"{$text_if_tz_same}\",\n    }\n  </script>\n  <script src=\"https://scp-wiki.wdfiles.com/local--files/component%3Atz/moment.min.js\"></script>\n  <script src=\"https://scp-wiki.wdfiles.com/local--files/component%3Atz/moment-timezone-with-data-10-year-range.min.js\"></script>\n  <script src=\"https://scp-wiki.wdfiles.com/local--code/component%3Atz/1\"></script>\n  <link href=\"https://d3g0gp89917ko0.cloudfront.net/v--edac79f846ba/common--theme/base/css/style.css\" rel=\"stylesheet\">\n  <link href=\"https://scp-wiki.wikidot.com/local--code/component%3Atheme/1\" rel=\"stylesheet\">\n  <style>\n    .tz {\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      line-height: 1;\n      padding-block: 0.2em;\n    }\n    .tz__icons {\n      display: flex;\n      margin-right: 0.5ch;\n    }\n    .tz__icon {\n      display: inline-block;\n      height: 1em;\n      width: 1em;\n      mask-size: 100%;\n      background: currentColor;\n      mask-image: var(--mask);\n    }\n    .tz__icon--world {\n      --mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg fill='none' stroke='%23000' stroke-width='2'%3E%3Ccircle cx='12' cy='12' r='10'/%3E%3Cpath d='M12 2a14.5 14.5 0 0 0 0 20a14.5 14.5 0 0 0 0-20M2 12h20'/%3E%3C/g%3E%3C/svg%3E\");\n    }\n    .tz__icon--clock {\n      --mask: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg fill='none' stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Ccircle cx='12' cy='12' r='10'/%3E%3Cpath d='M12 6v6l4 2'/%3E%3C/g%3E%3C/svg%3E\");\n    }\n    .tz__text--error {\n      color: red;\n    }\n  </style>\n  <style>{$css}</style>\n</head>\n<body>\n  <div class=\"tz\">\n    <span class=\"tz__icons\">\n      <span class=\"tz__icon tz__icon--world\"></span>\n      <span class=\"tz__icon tz__icon--clock\"></span>\n    </span>\n    <span class=\"tz__text\" id=\"display-text\"></span>\n    <span class=\"tz__text tz__text--error\" id=\"error-message\"></span>\n  </div>\n</body>\n[[/html]]\n[[/div]]\n\n[[iftags +component]]\n~~~~~\n\n-----\n\n+ Codebase\n\n++ HTML structure of the converter\n\nFor the purposes of CSS styling, this is the structure of the contents of the iframe. Check the page source for all the details.\n\n[[div class=\"code\"]]\n@@  <div class=\"tz\">@@\n@@    <span class=\"tz__icons\">@@\n@@      <span class=\"tz__icon tz__icon--world\"></span>@@\n@@      <span class=\"tz__icon tz__icon--clock\"></span>@@\n@@    </span>@@\n@@    <span class=\"tz__text\" id=\"display-text\"></span>@@\n@@    <span class=\"tz__text tz__text--error\" id=\"error-message\"></span>@@\n@@  </div>@@\n[[/div]]\n\n++ JS to operate the converter\n[[code type=\"javascript\"]]\nconst ip = function toIncludeParameter([parameterName]) {\n  return \"{$\" + parameterName + \"}\"\n}\n\nfunction throwUserError(errmsg) {\n  document.getElementById(\"error-message\").textContent = errmsg\n  throw new Error(errmsg)\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  // Handle required parameters\n  if (inputs.time === ip`time`) {\n    throwUserError(\"Missing required parameter: time\")\n  }\n\n  // Set parameter default values\n  if (inputs.tz === ip`tz`) {\n    inputs.tz = \"UTC\"\n  }\n  if (inputs.text === ip`text`) {\n    inputs.text = \"${timeOriginal} ${tzOriginal} is ${timeLocal} ${tzLocal}.\"\n  }\n\n  // Override daylight savings timezones\n  if (/^E[SD]?T$/.test(inputs.tz)) {\n    inputs.tz = \"America/New_York\"\n  }\n  if (inputs.tz === \"BST\") {\n    inputs.tz = \"Europe/London\"\n  }\n\n  const timeOriginal = inputs.time\n  const date = new Date().toISOString().split(\"T\")[0]\n  const datetime = `${date} ${timeOriginal}`\n  const momentOriginal = moment.tz(datetime, inputs.tz)\n  const tzOriginal = momentOriginal.format(\"z\")\n\n  const momentLocal = momentOriginal.tz(moment.tz.guess())\n  const timeLocal = momentLocal.format(\"LT\")\n  const tzLocal = momentLocal.format(\"z\")\n\n  let displayText = inputs.text\n    .replace(\"${timeOriginal}\", timeOriginal)\n    .replace(\"${tzOriginal}\", tzOriginal)\n    .replace(\"${timeLocal}\", timeLocal)\n    .replace(\"${tzLocal}\", tzLocal)\n\n  console.log(\n    \"component:tz\",\n    { timeOriginal, tzOriginal, tzLocal, timeLocal, displayText }\n  )\n\n  if (tzLocal === tzOriginal) {\n    if (inputs.textSame === ip`text_if_tz_same`) {\n      document.documentElement.style.display = 'none'\n      return\n    }\n    displayText = inputs.textSame\n  }\n\n  document.getElementById(\"display-text\").textContent = displayText\n});\n[[/code]]\n\n[[/iftags]]",
  "tags": [
    "component"
  ],
  "author": "Croquembouche",
  "created_at": "2020-03-27T03:52:24+00:00",
  "updated_at": "2025-02-09T01:25:39+00:00",
  "rating": 16,
  "_site": "scp-wiki",
  "_fullname": "component:tz"
}