{
  "title": "从精通到晕头转向：基于Listpages与CSS计数器的进阶数据处理",
  "content": "[[=]]\n[[module ListPages range=\".\" ]]\n字数：%%size%%\n[[/module]]\n[[/=]]\n\n[[include :scp-wiki-cn:theme:parallel deep-diamond=*]]\n\n[[module css]]\n\n:root{\n    --basalt-bright-element-color: 93, 153, 101;\n    --basalt-dark-element-color: 65, 174, 60;\n    --basalt-darker-element-color: 140, 194, 105;\n}\n\nh1, h3, h4, h5, h6 {\n  margin: 1em 0;\n}\n\nh1, h2, h3 { text-align: center; }\n\nhr {\n  background-color: rgb(var(--basalt-main-text-color)) !important;\n}\n\n.footnotes-footer {display:none;}\n\nstrong {\n    color: rgb(var(--basalt-darker-element-color));\n    text-decoration-color: inherit;\n}\n\n.sample strong {\n    color: inherit;\n}\n\nli:not(:first-child) {margin-top: 0.5em;}\n\n.cent td {\n    text-align: center;\n}\n\n.list2 {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr); \n}\n\n@media (max-width: 1020px)\n.list2 {grid-template-columns: 1fr;}\n}\n\n\n/* ruby fix from scp-cn-2512 */\n\np:has(span.ruby) {\n    line-height: 1.7;\n}\n\nspan.ruby {\n    height: unset;\n    display: inline-flex;\n    flex-direction: column-reverse;\n    align-items: center;\n    vertical-align: top;\n}\n\nspan.rt {\n    display: block;\n    margin-top: -0.625em;\n    margin-bottom: 0;\n    line-height: 1.25;\n}\n\n/* code fix */\n.code {\n    --_reserved: 114, 162, 247;\n    --_number: 237, 123, 163;\n    --_string: 93, 178, 107;\n    --_quotes: 93, 178, 107;\n    --_special: 0, 183, 159;\n    --_var: 193, 154, 73;\n    margin: 1.5rem 0;\n    box-shadow: none !important;\n    background-color: #ffffff11;\n}\n\n.blockquote > .blockquote {\n    max-width: 100% !important;\n    margin: 1.5rem 0;\n    box-shadow: none !important;\n    background-color: #ffffff11;\n}\n\n[[/module]]\n\n[[>]]\n[[module rate]]\n[[/>]]\n\n@@ @@\n\n各位下午好，这里是[[user Sharia Vanilla]]，欢迎回到我们的Listpages进阶教程——在上一期的[[[listpages-entry-again|入门讲座]]]中，我们介绍了通过Listpages抓取单页数据并对其进行简单处理与展示的小技巧，以及共计(n-1)位中分成员都非常喜欢的Listpages迭代。然而，对抓取到的多个页面进行整体上的数据统计似乎一直以来都是个麻烦事。在大多数人的理解中，如果仅凭借基础的Listpages统计功能，我们只能对抓取到的页面做一些类似于最大值、最小值以及总数之类的常规统计。但是，如果我们在这里面混入一点点//小技巧//，我们就能得到一些可能会有更多人感兴趣的数据：例如，总分数、总投票数或总作者数。\n\n这期的相关文档包括[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_counter_styles/Using_CSS_counters CSS计数器的使用]以及[https://www.wikidot.com/doc-modules:listpages-module Listpages的官方文档]。那么话不多说，让我们开始吧。\n\n@@ @@\n\n[[div style=\"border-bottom:2px solid #777;border-top:2px solid #777; padding:1px;\"]]\n[[div style=\"border-bottom:1px solid #777;border-top:1px solid #777; text-align: center;\"]]\n++ 1.回顾/预备知识\n[[/div]]\n[[/div]]\n\n@@ @@\n\n+++ 1.1. Listpages生成结构\n\n这一章节中的部分内容在上一期教程中已经有过讲解，此处仅作简单说明。\n\n在不添加任何参数的情况下，Listpages的生成结构如下：\n\n[[div class=\"blockquote title\" data-title=\"FTML\"]]\n\n[[code type=\"CSS\"]]\n[[div class=\"list-pages-box\"]]\n  [[div class=\"list-pages-item\"]]\n    内容1\n  [[/div]]\n  [[div class=\"list-pages-item\"]]\n    内容2\n  [[/div]]\n  ......\n[[/div]]\n[[/code]]\n\n[[/div]]\n\n调用Listpages模块时，**wrapper=**与**separate=**这两个参数分别被用于控制上述结构的外部div和内部div。它们的缺省值是\"yes\"。当**wrapper=\"no\"**时，将不会在编译时添加**list-pages-box**这一div块，当**separate=\"no\"**时，则不会添加**list-pages-item**这一div块。\n\n为了避免模块额外添加的分割块影响CSS调整，本文中的Listpages模块将默认使用**wrapper=\"no\" separate=\"no\"**。同时，为了尽可能避免分页模块的影响，建议额外添加**perPage=\"250\"**以最大化可用列举范围。\n\n+++ 1.2. 在Listpages模块中插入CSS修改\n\n这一技术同样在入门篇中做过简单介绍。你可以通过使用\n\n[[div class=\"blockquote title\" data-title=\"FTML\"]]\n\n[[code type=\"CSS\"]]\n[[%%content{0}%%module css]]\n你需要的css代码\n[[%%content{0}%%/module]]\n[[/code]]\n\n[[/div]]\n\n在Listpages模块中插入CSS修改。其原理是任何页面的%%content{0}%%均会被Listpages模块解析为空字符串。\n\n+++ 1.3. CSS计数器\n\nCSS计数器是CSS提供的一个功能。它由三个属性**counter-reset**、**counter-set**与**counter-increment**，以及两个函数**counter()**与**counters()**组成。它们的格式与用法简单列举如下：\n\n[[div class=\"blockquote title\" data-title=\"CSS\"]]\n\n[[code type=\"CSS\"]]\ndiv.reset {\n  counter-reset: counter1; /* 创建计数器counter1，并将counter1的值设为0。 */\n  counter-reset: counter1 2 counter2 4; \n  /* 可以为计数器提供初始值，也可以一次初始化多个计数器。 */\n}\ndiv.set {\n  counter-set: counter1 8; /* 将计数器的值直接设置为指定值。此处同样可以一次设置多个计数器。 */\n}\ndiv.increment {\n  counter-increment: counter1; /* 缺省参数时，将计数器的值增加1。 */\n  counter-increment: counter1 -1 counter2 0; /* 参数可以填写0或负数。 */\n}\ndiv.print::before {\n  content: counter(counter1); /* counter函数只能被用在伪元素的content上，是一个字符串变量。 */ \n  content: \"(\" counter(counter1, lower-roman) \").\"; \n  /* 可以为counter的第二个参数填写计数器样式，或将函数通过空格与其它字符串连接。\n      例如，当counter1的值为7时，此处展示为(vii). */\n}\n\n[[/code]]\n\n[[/div]]\n\n以[[[scp-cn-001|001提案中心页]]]为例，其CSS/FTML结构简化后如下所示。此处CSS计数器“series”在进入**div.content-panel**时被创建并初始化为0，并在每次经过**div.divider**时自增1。如此即可实现自动的系列编号标注。\n\n[[div class=\"blockquote title\" data-title=\"CSS/FTML\"]]\n\n[[code type=\"CSS\"]]\n[[module css]]\n.content-panel {\n  counter-reset: series;\n}\n.content-panel .divider {\n  font-size: 0;\n  counter-increment: series;\n}\n.content-panel .divider::after {\n  font-size: .675rem;\n  content: counter(series, upper-roman);\n}\n[[/module]] \n\n[[div class=\"content-panel standalone series\"]]\n  [[div class=\"divider\"]]\n     此处Series=1。本段文字内容不会展示，仅用于确保所属div不会被隐藏，下同。\n  [[/div]]\n  [[div class=\"divider\"]]\n     此处Series=2。\n  [[/div]]\n  [[div class=\"divider\"]]\n     此处Series=3。\n  [[/div]]\n  [[div class=\"divider\"]]\n     此处Series=4，实际展示内容为\"IV\"。\n  [[/div]]\n[[/div]]\n[[/code]]\n\n[[/div]]\n\n@@ @@\n\n[[div style=\"border-bottom:2px solid #777;border-top:2px solid #777; padding:1px;\"]]\n[[div style=\"border-bottom:1px solid #777;border-top:1px solid #777; text-align: center;\"]]\n++ 2.基于CSS/Listpages的总分计算\n[[/div]]\n[[/div]]\n\n@@ @@\n\n计算一系列文章的总分几乎可以说是Listpages不自带的所有功能中需求量最大的一个。你或许愿意在你的作者页中加上一个这玩意来展示你的累累战果，也可能需要在某些[[[2023-canon-contest-hub|团队]]][[[gnome-hub|竞赛]]]进行的时候为每个队伍在你的作者页中导演一场分数的皇城PK。一段简单的总分计算代码如下所示：\n\n[[div class=\"blockquote title\" data-title=\"CSS/FTML\"]]\n\n[[code type=\"CSS\"]]\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.sumVotes {\n  counter-reset: sumVotes;\n}\ndiv.sumVotes > div:last-of-type::before {\n  content: \"标签包含'猫科'的原创作品总分为\" counter(sumVotes) \"。\";\n}\n[[/module]]\n\n[[div class=\"sumVotes\"]]\n[[module Listpages tags=\"+原创 +猫科\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[/div]]\n[[/code]]\n\n----\n\n[[div class=\"blockquote\"]]\n\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.sumVotes {\n  counter-reset: sumVotes;\n}\ndiv.sumVotes > div:last-of-type::before {\n  content: \"标签包含'猫科'的原创作品总分为\" counter(sumVotes) \"。\";\n}\n[[/module]]\n\n[[div class=\"sumVotes\"]]\n[[module Listpages tags=\"+原创 +猫科\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[/div]]\n\n[[/div]]\n\n[[/div]]\n\n这段代码能够实现总分计算的具体原理在于：\n# 在**div.sumVotes**中，我们创建了一个名为**sumVotes**的CSS计数器。这一计数器被用于统计待抓取篇目的总分。\n# 在通过Listpages创建的，每一篇文章各自对应的独立内容部分，我们通过内联样式**counter-increment: sumVotes %%rating%%**将计数器**sumVotes**的值增加**%%rating%%**，后者是Listpages提供的，获取文章当前分数的参数。\n# 在**div.sumVotes**下的最后一个子div中，我们通过伪元素展示最终的统计结果。\n\n这里的%%rating%%可以被替换为%%rating_votes%%/%%comments%%以统计总投票数/总评论数，也可以使用表达式结构（**@@[[#expr ]]@@**等）对数据进行一定的预处理。\n\n如果需要统计的文章篇目过多（超过250篇），或是有某些不满足筛选条件但仍需统计的例外篇目，可以直接通过串联Listpages的方式扩展上述代码。例如，统计全站原创goi格式总分的代码如下所示：\n\n[[div class=\"blockquote title\" data-title=\"CSS/FTML\"]]\n\n[[code type=\"CSS\"]]\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.sumVotes { /* 如果你希望在一个页面中添加多个展示文本不同的计分器，请修改每一处父div的class名。 */\n  counter-reset: sumVotes; /* 计数器名称无需修改。 */\n}\ndiv.sumVotes > div:last-of-type::before {\n  content: \"原创GoI格式总分为\" counter(sumVotes) \"。\";\n}\n[[/module]]\n\n[[div class=\"sumVotes\"]]\n[[module Listpages tags=\"+原创 +goi格式\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" limit=\"250\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[module Listpages tags=\"+原创 +goi格式\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" offset=\"250\" limit=\"250\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[/div]]\n[[/code]]\n\n----\n\n[[div class=\"blockquote\"]]\n\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.sumVotes2 {\n  counter-reset: sumVotes;\n}\ndiv.sumVotes2 > div:last-of-type::before {\n  content: \"原创GoI格式总分为\" counter(sumVotes) \"。\";\n}\n[[/module]]\n\n[[div class=\"sumVotes2\"]]\n[[module Listpages tags=\"+原创 +goi格式\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" limit=\"250\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[module Listpages tags=\"+原创 +goi格式\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" offset=\"250\" limit=\"250\" perPage=\"250\"]]\n[[div style=\"counter-increment: sumVotes %%rating%%;\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[/module]]\n[[/div]]\n\n[[/div]]\n\n[[/div]]\n\n此外，你还可以用类似的技巧对实现多组Listpages参数的可视化。例如，下面的这段代码在实现统计朝颜文学报、旅行者之书以及妖精们三个标签的总分的同时，在一定程度上按照总分分配了对应进度条的占比：\n\n[[div class=\"blockquote title\" data-title=\"CSS/FTML\"]]\n\n[[code type=\"CSS\"]]\n[[module css]]\nspan.hidden {\n  display: none;\n}\n.display-area {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n}\n.flex-line {\n  grid-area: 1 / 1 / span 1 / span 3;\n  display: flex;\n  flex-wrap: wrap;\n  counter-set: counter1 0 counter2 0 counter3 0;\n}\n.display-area p {\n  margin: 0;\n  color: transparent;\n  user-select: none;\n}\n\n.item.c1 {background-color: #ff8889;}\n.item.c2 {background-color: #5fc572;}\n.item.c3 {background-color: #00c1ff;}\n\n.counter-displayer {\n  text-align: center;\n  color: black;\n}\n\n.counter-displayer.c1 {grid-area: 1 / 1 / span 1 / span 1;}\n.counter-displayer.c2 {grid-area: 1 / 2 / span 1 / span 1;}\n.counter-displayer.c3 {grid-area: 1 / 3 / span 1 / span 1;}\n\n.counter-displayer.c1::before {content: counter(counter1);}\n.counter-displayer.c2::before {content: counter(counter2);}\n.counter-displayer.c3::before {content: counter(counter3);}\n\n[[/module]]\n\n[[div class=\"display-area\"]]\n\n[[div class=\"flex-line\"]]\n\n[[module Listpages tags=\"+原创 +朝颜文学报\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c1\" style=\"flex: %%rating%%; counter-increment: counter1 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[module Listpages tags=\"+原创 +旅行者之书\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c2\" style=\"flex: %%rating%%; counter-increment: counter2 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[module Listpages tags=\"+原创 +妖精们\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c3\" style=\"flex: %%rating%%; counter-increment: counter3 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[/div]]\n\n[[div class=\"counter-displayer c1\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[div class=\"counter-displayer c2\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[div class=\"counter-displayer c3\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[/div]]\n[[/code]]\n\n----\n\n[[div class=\"blockquote\"]]\n\n[[module css]]\nspan.hidden {\n  display: none;\n}\n\n.display-area {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n}\n.flex-line {\n  grid-area: 1 / 1 / span 1 / span 3;\n  display: flex;\n  flex-wrap: wrap;\n  counter-set: counter1 0 counter2 0 counter3 0;\n}\n\n.display-area p {\n  margin: 0;\n  color: transparent;\n  user-select: none;\n}\n\n.item.c1 {background-color: #ff8889;}\n.item.c2 {background-color: #5fc572;}\n.item.c3 {background-color: #00c1ff;}\n\n.counter-displayer {\n  text-align: center;\n  color: black;\n}\n\n.counter-displayer.c1 {grid-area: 1 / 1 / span 1 / span 1;}\n.counter-displayer.c2 {grid-area: 1 / 2 / span 1 / span 1;}\n.counter-displayer.c3 {grid-area: 1 / 3 / span 1 / span 1;}\n\n.counter-displayer.c1::before {content: counter(counter1);}\n.counter-displayer.c2::before {content: counter(counter2);}\n.counter-displayer.c3::before {content: counter(counter3);}\n[[/module]]\n\n[[div class=\"display-area\"]]\n\n[[div class=\"flex-line\"]]\n\n[[module Listpages tags=\"+原创 +朝颜文学报\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c1\" style=\"flex: %%rating%%; counter-increment: counter1 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[module Listpages tags=\"+原创 +旅行者之书\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c2\" style=\"flex: %%rating%%; counter-increment: counter2 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[module Listpages tags=\"+原创 +妖精们\" category=\"-deleted\" separate=\"no\" wrapper=\"no\" perPage=\"250\"]]\n[[div class=\"item c3\" style=\"flex: %%rating%%; counter-increment: counter3 %%rating%%;\"]]\n.\n[[/div]]\n[[/module]]\n\n[[/div]]\n\n[[div class=\"counter-displayer c1\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[div class=\"counter-displayer c2\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[div class=\"counter-displayer c3\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n\n[[/div]]\n\n[[/div]]\n\n[[/div]]\n\n这一组件通过为一个flex布局下的子div调整其flex属性以动态调整宽度。需注意当抓取到的篇目总数过多时，组件可能强制换行从而影响展示效果。\n\n@@ @@\n\n[[div style=\"border-bottom:2px solid #777;border-top:2px solid #777; padding:1px;\"]]\n[[div style=\"border-bottom:1px solid #777;border-top:1px solid #777; text-align: center;\"]]\n++ 3.基于CSS/Listpages的作者数统计\n[[/div]]\n[[/div]]\n\n@@ @@\n\n为某个标签统计其（发布页面的）不同贡献者总数对于希望构建中心页的用户来说可能有重要意义。其效果可以参考[[[kitchen|中央厨房中心]]]。这一功能的一种实现方式如下：\n\n[[div class=\"blockquote title\" data-title=\"CSS/FTML\"]]\n\n[[code type=\"CSS\"]]\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.count-author {\n  counter-reset: listAuthor;\n}\ndiv.count-author > div.listAuthor {\n  counter-increment: listAuthor;\n}\ndiv.count-author > div:last-of-type::before {\n  content: \"共有\" counter(listAuthor) \"名作者参与短竞。\";\n}\n[[/module]]\n\n[[div class=\"count-author\"]]\n[[module listpages tags=\"+2024噤声短文竞赛\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" order=\"created_by\" perPage=\"250\"]]\n[[div class=\"listAuthor n%%created_by_id%%\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[%%content{0}%%module css]]\ndiv.n%%created_by_id%% + div.n%%created_by_id%% {\n  counter-increment: none;\n}\n[[%%content{0}%%/module]]\n[[/module]]\n[[/div]]\n[[/code]]\n\n----\n\n[[div class=\"blockquote\"]]\n[[module css]]\nspan.hidden {\n  display: none;\n}\ndiv.count-author {\n    counter-reset: listAuthor;\n}\ndiv.count-author > div.listAuthor {\n    counter-increment: listAuthor;\n}\ndiv.count-author > div:last-of-type::before {\n  content: \"共有\" counter(listAuthor) \"名作者参与短竞。\";\n}\n[[/module]]\n\n[[div class=\"count-author\"]]\n[[module listpages tags=\"+2024噤声短文竞赛\" category=\"-deleted\" wrapper=\"no\" separate=\"no\" order=\"created_by\" perPage=\"250\"]]\n[[div class=\"listAuthor n%%created_by_id%%\"]]\n[[span class=\"hidden\"]]@@ @@[[/span]]\n[[/div]]\n[[%%content{0}%%module css]]\ndiv.n%%created_by_id%% + div.n%%created_by_id%% {\n  counter-increment: none;\n}\n[[%%content{0}%%/module]]\n[[/module]]\n[[/div]]\n[[/div]]\n\n[[/div]]\n\n在前置的固定CSS代码部分，我们创建了一个名为**listAuthor**的CSS计数器，每当遇见一次**div.listAuthor**，这个计数器就会增加1。而在Listpages内部的div块默认带有listAuthor类，这也就代表着在没有其他修改的情况下，每统计到一篇文章就会将**listAuthor**这一计数器增加一次。\n\n本段代码中出现的Listpages模块有一个与前述分数统计不同的地方：它拥有**order=\"created_by\"**这一参数，这意味着所有被捕捉到的文章在这个模块中将按照页面创建者的名称顺序排列，也即每一位用户创建的所有页面将会彼此相邻。同时，**n%%created_by_id%%**被用来作为div块的另一个类：此处的**%%created_by_id%%**是页面创建者的数字ID，可以避免用户名中特殊符号（如空格）对代码的影响，这同样可以被**%%created_by_unix%%**（用户内部名）等效替换。\n\n[[code type=\"CSS\"]]\n[[%%content{0}%%module css]]\ndiv.n%%created_by_id%% + div.n%%created_by_id%% {\n  counter-increment: none;\n}\n[[%%content{0}%%/module]]\n[[/code]]\n\n在这段代码中，我们用到了在入门篇中提到过的，在Listpages模块中插入CSS修改的小技巧。这段CSS代码的作用是，如果前后相继的两个div块所属的文章由同一位用户创建，也即拥有同一个**n%%created_by_id%%**类名，那么靠后的那个div块将不会使计数器增加，下面的引用框中展示了这一算法的简单工作原理：\n\n[[div class=\"blockquote\"]]\n[[div style=\"display: flex; text-align: center;\"]]\n[[div style=\"flex: 1;\"]]\n未添加CSS修改\n**user-A** - listAuthor = 1\n**user-A** - listAuthor = 2\n**user-B** - listAuthor = 3\n**user-C** - listAuthor = 4\n**user-C** - listAuthor = 5\n**user-C** - listAuthor = 6\n[[/div]]\n[[div style=\"flex: 1;\"]]\n添加CSS修改\n**user-A** - listAuthor = 1\n**user-A** - listAuthor = 1\n**user-B** - listAuthor = 2\n**user-C** - listAuthor = 3\n**user-C** - listAuthor = 3\n**user-C** - listAuthor = 3\n[[/div]]\n\n[[/div]]\n[[/div]]\n\n这样一来，我们很容易就获取到了在某个筛选条件下的贡献者总数。需要注意的是，由于删除账号用户对应的%%commented_by_unix%%与%%commented_by_id%%均为空值，因此即便使用前者，也需要在变量前添加一个字符，以确保后者总是能够组成一个具体的类名。\n\n\n那么，本篇指南的主要内容到这里就结束了。最后，如果你对这篇文章中的内容有任何疑惑，欢迎在评论区留言或通过各种途径联系笔者，即[[user Sharia Vanilla]]。\n\n@@ @@\n\n[[include :scp-wiki-cn:component:earthworm\n| first=false | last=true | hub=yes\n| previous-url=https://scp-wiki-cn.wikidot.com/listpages-entry-again | previous-title=入门篇\n| hub-url=# | hub-title=进阶篇1\n]]\n\n@@ @@\n\n[[=]]\n\n[[include :scp-wiki-cn:component:license-box\n|lang=CN\n|author=Sharia Vanilla\n]]\n\n[[include :scp-wiki-cn:component:license-box-end]]\n\n[[/=]]",
  "tags": [
    "原创",
    "文章"
  ],
  "author": "Sharia Vanilla",
  "created_at": "2025-01-21T08:10:26+00:00",
  "updated_at": "2025-01-21T08:12:39+00:00",
  "rating": 34,
  "_site": "scp-wiki-cn",
  "_fullname": "listpages-dazzling"
}