{
  "title": "Site News Title Fetcher",
  "content": "[[html]]\n  <head>\n    <link href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\">\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" crossorigin=\"anonymous\"></script>\n    <style type=\"text/css\">\n      .log p {\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n      .error {\n        color: red;\n      }\n      textarea {\n        white-space: pre-wrap;\n      }\n    </style>\n    <script type=\"text/javascript\">\n      \n      \"use strict\";\n      \n      Array.prototype.unique = function() {\n        return this.filter(function (value, index, self) { \n          return self.indexOf(value) === index;\n        });\n      }\n      \n      String.prototype.toCamelCase = function() {return this.toLowerCase().replace(/[^\\w\\s\\-]/g, '').replace(/[^a-z0-9]/g, ' ').replace(/^\\s+|\\s+$/g, '').replace(/\\s(.)/g, function(match,group) {return group.toUpperCase()})};\n      \n      var list = {\n        original: \"\",\n        lines: [],\n        scps: [],\n        scpTypes: [],\n        placeholder: [],\n        authors: [],\n      };\n      \n      var one = 0, two = 0, three = 0, four = 0, joke = 0, five = 0, \nsix = 0, seven = 0, explained = 0, archived = 0, mystery = 0;\n      \n      var vlog = function(data, error) {\n        if(typeof error === \"undefined\") {\n          $(\"div.log\").append(\"<p>\" + data + \"</p>\");\n          console.log(data);\n        } else {\n          $(\"div.log\").append(\"<p class='error'>\" + data + \"</p>\");\n        };\n      };\n      \n      var pagesToFetch = [];\n      var pageData = {\n        scpSeries: [],\n        scpSeries2: [],\n        scpSeries3: [],\n        scpSeries4: [],\n        scpSeries5: [],\n        scpSeries6: [],\n        scpSeries7: [],\n        scpEx: [],\n        archivedScps: [],\n        jokeScps: [],\n        authorsPages: [],\n      };\n      \n      var fetch = function(index) {\n        // This function is called towards the end of #pull, handles grabbing and presenting the data.\n        // must return array of objects {url: title:} for the complete series\n        \n        //possible pagenames: 1,2,3,4,5,6,ex,arc,joke\n        //urls: scp-series, append -x, scp-ex, joke-scps, archived-scps\n        //only archived-scps has a nonstandard format\n        vlog(\"Fetching \" + pagesToFetch[index] + \"...\");\n        $.ajax({\n          type: \"GET\",\n          url: \"https://api.codetabs.com/v1/proxy?quest=\" + \"http://scp-wiki.wikidot.com/\" + pagesToFetch[index],\n          timeout: 10000,\n          error: function(jqXHR, textStatus, errorThrown) {\n            vlog(\"Connection error: \" + textStatus, true)\n          },\n          success: function(response) {\n            console.log(\"Fetched! \" + typeof response);\n            console.log(response);\n            const contents = new DOMParser().parseFromString(response, \"text/html\");\n            console.log(contents)\n            //code for manipulating mainlist goes here\n            if(pagesToFetch[index] === \"authors-pages\") {\n              var mainlist = $(contents).find(\"#page-content tr\");\n            } else {\n              var mainlist = $(contents).find(\"#page-content .content-panel:first ul li\");\n            }\n            console.log(mainlist);\n            \n            // split up \"SCP-XXXX - Title\" into [\"SCP-XXXX\",\"Title\"]\n            for(let i = 0; i < mainlist.length; i++) {\n              var splits = [];\n              if(pagesToFetch[index] === \"authors-pages\") {\n                // splits[0] is the url, splits[1] is the title / author name\n                splits[0] = mainlist[i].children[1].children[0].pathname.substring(1);\n                splits[1] = mainlist[i].children[0].innerText;\n              } else {\n                splits = mainlist[i].innerHTML.split(\" - \");\n                switch(splits.length) {\n                  case 0:\n                    throw new Error(\"No splits - \" + pagesToFetch[index] + \" at index \" + i);\n                    break;\n                  case 1:\n                    // Ignore this entry\n                    splits = [\"Invalid\",\"Invalid\"];\n                    break;\n                  case 2:\n                    // This is the intended value\n                    break;\n                  default:\n                    // At negative values(?) + 3 and above\n                    // Keep first value, concatenate the rest\n                    splits = [splits[0], splits.slice(1).join(\" - \")];\n                };\n                \n                // replace HTML with wikicode and format the URL into a title\n                splits[0] = splits[0].replace(/<a href=\"\\/(scp-\\S+)\">SCP-\\S+<\\/a>/,\"$1\".toUpperCase());\n                splits[1] = splits[1].replace(\"<strong>\",\"**\").replace(\"</strong>\",\"**\").replace(\"<em>\",\"//\").replace(\"</em>\",\"//\");\n              }\n              \n              // Log these splits to the thing\n              pageData[pagesToFetch[index].toCamelCase()].push({url: splits[0], title: splits[1]});\n              \n              // Now we check all of OUR SCPs against the mainlist\n              // list.scpTypes has a list of the urls our SCPs need, in the right order.\n              for(let j = 0; j < list.scpTypes.length; j++) {\n                if(list.scpTypes[j] === pagesToFetch[index]) {\n                  // the SCP we're evaluating is of the correct type\n                  if(list.scps[j].toUpperCase() === splits[0].toUpperCase()) {\n                    vlog(\"Found a match for \" + list.scps[j] + \" (\" + splits[1] + \")\");\n                    // Yay we did it! Now we need to replace %%actual-title%%\n                    list.lines[j] = list.lines[j].replace(\"%%actual-title%%\",splits[1]);\n                  };\n                };\n                // evaluate the author thingy\n                if($(\"#replaceAuthor\").prop(\"checked\") && list.authors[j] === splits[1]) {\n                  // found a match for this author\n                  console.log(\"Found the author page of \" + splits[1] + \", \" + splits[0]);\n                  list.lines[j] = list.lines[j].replace(new RegExp($(\"#authorSearch\").val(),\"gm\"),$(\"#matchReplace\").val().replace(\"$1\",splits[1]).replace(\"$2\",splits[0]));\n                  list.authors[j] = 0; // mark this author as already-replaced\n                } else {\n                  // no match :'(\n                  //list.lines[j] = list.lines[j].replace(new RegExp($(\"#authorSearch\").val()),$(\"#missReplace\").val().replace(\"$1\",splits[1]));\n                };\n              };\n            };\n            // now let's go through and clean up unreplaced authors\n            if($(\"#replaceAuthor\").prop(\"checked\")) {\n              for(let j = 0; j < list.authors.length; j++) {\n                if(list.authors[j] !== 0) {\n                  list.lines[j] = list.lines[j].replace(new RegExp($(\"#authorSearch\").val()),$(\"#missReplace\").val().replace(\"$1\",list.authors[j]));\n                };\n              };\n            };\n            \n            if(++index < pagesToFetch.length) {\n              fetch(index);\n            } else {\n              // now that all the lines have been replaced, substitute this into the textarea\n              vlog(\"Outputting results...\");\n              $(\"#output\").val(list.lines.join(\"\\n\"));\n              vlog(\"Done.\");\n              $(\"#copy\").prop(\"disabled\", false);\n            };\n          },\n        });\n      }\n      \n      $(document).ready(function() {\n        \n        $(\"#clear\").on(\"click\", function() {\n          $(\"div.log\").empty();\n        });\n        \n        $(\"#fetch\").on(\"click\", function() {\n          \n          list = {\n            original: \"\",\n            lines: [],\n            scps: [],\n            scpTypes: [],\n            placeholder: [],\n            authors: [],\n          };\n          one = 0, two = 0, three = 0, four = 0, joke = 0, five = 0, six = 0, seven = 0, explained = 0, archived = 0, mystery = 0;\n          \n          try {\n            vlog(\"Evaluating input...\");\n            // Step one: take the original text and save it to the variable\n            list.original = $(\"#input\").val();\n            // Save this to the savebox\n            $(\"#savebox\").val(list.original);\n            \n            // Step two: split the list up into lines\n            list.lines = list.original.split(\"\\n\");\n            \n            if(list.lines.length === 1 && list.lines[0] == \"\") {\n              throw new Error(\"Input is empty\");\n            };\n            \n            // Step three: search for SCPs\n            // Go through each line and find the matching SCPs\n            // list.scps is currently an empty array\n            \n            //fist, check if there are ANY scps or title placeholders\n            if(list.original.search(/%%actual-title%%/) == -1) {\n              throw new Error(\"No title placeholders present\");\n            };\n            if(list.original.search(/[scp]{3}-/i) == -1) {\n              throw new Error(\"No SCPs detected\");\n            };\n            \n            var missingPlaceholders = [];\n            var missingScps = [];\n            \n            for(let line = 0; line < list.lines.length; line++) {\n              // Iterating through each line\n              // First, we need to check what lines are missing a title placeholder\n              list.placeholder[line] = list.lines[line].search(/%%actual-title%%/);\n              if(list.placeholder[line] == -1) {\n                missingPlaceholders.push(line + 1);\n              };\n              \n              // Next, check which lines are missing SCP\n              list.scps[line] = list.lines[line].search(/[scp]{3}-/i);\n              if(list.scps[line] == -1) {\n                missingScps.push(line + 1);\n              };\n              \n            }\n            \n            if(missingPlaceholders.length) {\n              vlog(\"Warning: no title placeholders detected on line(s) \" + missingPlaceholders.join(\", \"), true);\n            }\n            if(missingScps.length) {\n              vlog(\"Warning: no SCPs detected on line(s) \" + missingScps.join(\", \"), true);\n            }\n            \n            for(let line = 0; line < list.lines.length; line++) {\n              // still iterating through lines, but this time we know which ones to avoid\n              if(missingPlaceholders.includes(line + 1) || missingScps.includes(line + 1)) {\n                //do nothing, skip\n              } else {\n                // work out what scp we need to fetch\n                if(list.lines[line].match(/([scp]{3}-\\S+-j)\\D/i)) {\n                  \n                  // match Joke SCPs\n                  list.scps[line] = list.lines[line].match(/([scp]{3}-\\S+-j)\\D/i)[1];\n                  list.scpTypes[line] = \"joke-scps\";\n                  \n                } else if(list.lines[line].match(/(scp-\\d{3})\\D/i)) {\n                  \n                  // match series 1 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series\";\n                  \n                } else if(list.lines[line].match(/(scp-1\\d{3})\\D/i)) {\n                  \n                  // match series 2 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-1\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-2\";\n                  \n                } else if(list.lines[line].match(/(scp-2\\d{3})\\D/i)) {\n                  \n                  // match series 3 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-2\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-3\";\n                  \n                } else if(list.lines[line].match(/(scp-3\\d{3})\\D/i)) {\n                  \n                  // match series 4 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-3\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-4\";\n                  \n                } else if(list.lines[line].match(/(scp-4\\d{3})\\D/i)) {\n                  \n                  // match series 5 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-4\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-5\";\n                  \n                  // TODO: add detectors for -EX and -ARC\n                  \n                } else if(list.lines[line].match(/(scp-5\\d{3})\\D/i)) {\n                  \n                  // match series 6 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-5\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-6\";\n\n                } else if(list.lines[line].match(/(scp-6\\d{3})\\D/i)) {\n                  \n                  // match series 7 SCPs\n                  list.scps[line] = list.lines[line].match(/(scp-6\\d{3})\\D/i)[1];\n                  list.scpTypes[line] = \"scp-series-7\";\n                  \n                  // TODO: add detectors for -EX and -ARC\n                  \n                } else {\n                  vlog(\"Unsure whether or not there is an SCP on line \" + (line + 1));\n                };\n                \n                // now let's check for authors\n                if(list.lines[line].match($(\"#authorSearch\").val())) {\n                  list.authors[line] = list.lines[line].match($(\"#authorSearch\").val())[1];\n                };\n              };\n              \n              // squeeze this in while we're still looping\n              if(list.scps[line] == -1) {\n                list.scps[line] = \"unknown\";\n              };\n            };\n            \n            \n            vlog(\"Found \" + list.scps.length + \" entries: \" + list.scps.join(\", \").toUpperCase());\n            if($(\"#replaceAuthor\").prop(\"checked\")) vlog(\"Found \" + list.authors.unique().length + \" different authors\");\n            \n            // count up total numbers of jokes and series Xs\n            for(let i = 0; i < list.scpTypes.length; i++) {\n              switch(list.scpTypes[i]) {\n                case \"scp-series\":\n                  one++;\n                  break;\n                case \"scp-series-2\":\n                  two++;\n                  break;\n                case \"scp-series-3\":\n                  three++;\n                  break;\n                case \"scp-series-4\":\n                  four++;\n                  break;\n                case \"scp-series-5\":\n                  five++;\n                  break;\n                case \"scp-series-6\":\n                  six++;\n                  break;\n               case \"scp-series-7\":\n                  seven++;\n                  break;\n                case \"joke-scps\":\n                  joke++;\n                  break;\n                case \"scp-ex\":\n                  explained++;\n                  break;\n                case \"archived-scps\":\n                  archived++;\n                  break;\n                default:\n                  mystery++;\n              };\n            };\n            vlog(\"Found a total of \" + one + \" series 1s, \" + two + \" series 2s, \" + three + \" series 3s, \" + four + \" series 4s, \" + five + \" series 5s, \" + six + \" series 6s, \" + seven + \" series 7s, \" + explained + \" -EXs, \" + archived + \" -ARCs, \" + (mystery ? \", \" : \" and \") + joke + \" jokes\" + (mystery ? \" and \" + mystery + \" complete mysteries.\" : \".\"));\n            if(mystery) {\n              vlog(mystery + \" unknown article(s) - review these manually after fetching\", true);\n            };\n            \n            if(!(one || two || three || four || five || six || seven || joke || explained || archived)) {\n              throw new Error(\"Not fetching any pages\");\n            }\n            \n            if(Math.random() > 0.95) {\n              vlog(\"Ready to fetch, Daddy.\"); // for TSAT\n            } else {\n              vlog(\"Ready to fetch, Captain.\");\n            }\n            \n            $(\"#pull\").prop(\"disabled\", false);\n          }\n          catch(error) {\n            vlog(error + \", terminating\", true);\n            throw error;\n          }\n        });\n        \n        \n        // PULL\n        \n        \n        $(\"#pull\").on(\"click\", function() {\n          \n          $(\"#pull\").prop(\"disabled\", true);\n          $(\"#fetch\").prop(\"disabled\", true);\n          vlog(\"Fetching...\");\n          \n          try {\n            \n            // so what we're going to do here is define a new function that works out which pages we need to fetch.\n            // then, using promises, we grab each one in order.\n            \n            pagesToFetch = []; // list of all pages to fetch\n            if($(\"#replaceAuthor\").prop(\"checked\")) {\n              pagesToFetch.push(\"authors-pages\");\n            };\n            if(one) {\n              pagesToFetch.push(\"scp-series\");\n            };\n            if(two) {\n              pagesToFetch.push(\"scp-series-2\");\n            };\n            if(three) {\n              pagesToFetch.push(\"scp-series-3\");\n            };\n            if(four) {\n              pagesToFetch.push(\"scp-series-4\");\n            };\n            if(five) {\n              pagesToFetch.push(\"scp-series-5\");\n            };\n            if(six) {\n              pagesToFetch.push(\"scp-series-6\");\n            };\n            if(seven) {\n              pagesToFetch.push(\"scp-series-7\");\n            };\n            if(explained) {\n              pagesToFetch.push(\"scp-ex\");\n            };\n            if(archived) {\n              pagesToFetch.push(\"archived-scps\");\n            };\n            if(joke) {\n              pagesToFetch.push(\"joke-scps\");\n            };\n            \n            // the functions that fetch this MUST return a single ARRAY of objects {url: \"scp-XXX\", title: string\"}\n            console.log(pagesToFetch);\n            fetch(0);\n            // the fetch function will handle the remainder of the operation.\n            \n            $(\"#pull\").prop(\"disabled\", false);\n            $(\"#fetch\").prop(\"disabled\", false);\n          }\n          catch(error) {\n            vlog(error + \", terminating\", true);\n            throw error;\n          }\n        });\n        \n        /* AUTHOR STUFF */\n        \n        $(\"#replaceAuthor\").on(\"click\", function() {\n          \n          $(\"#pull\").prop(\"disabled\", true);\n          \n          if($(\"#replaceAuthor\").prop(\"checked\")) {\n            $(\"#authorOnly\").show();\n          } else {\n            $(\"#authorOnly\").hide();\n          }\n          \n          try {\n          }\n          catch(error) {\n            vlog(error + \", terminating\", true);\n            throw error;\n          }\n        });\n        \n        /* COPY */\n        \n        $(\"#copy\").on(\"click\", function() {\n        \t\n        \tconsole.log(\"Copied!\");\n          \n          try {\n          \t$(\"#output\").select();\n          \tdocument.execCommand(\"copy\");\n            $(\".output-container\").addClass(\"copied\");\n            setTimeout(function() {$(\".output-container\").removeClass(\"copied\");}, 1000);\n          }\n          catch(error) {\n            $(\".output-container\").addClass(\"failed\");\n            setTimeout(function() {$(\".output-container\").removeClass(\"failed\");}, 1000);\n            console.error(error);\n          }\n        });\n        \n      });\n      \n    </script>\n    <style>\n      body { font-family: Nunito, sans-serif; }\n      h1 { margin: 0.5rem 1rem 0.5em 1rem; }\n      * { box-sizing: border-box; }\n      body > div { border-radius: 3rem; margin: 0.2rem 0.6rem 1rem 0.6rem; padding: 1rem; box-shadow: 0 8px 17px 2px rgba(0,0,0,0.14), 0 3px 14px 2px rgba(0,0,0,0.12), 0 5px 5px -3px rgba(0,0,0,0.2); }\n      html { padding: 3rem; }\n      .hundred { width: 100%; display: flex; justify-content: center; }\n      .fifty { width: 50%; margin: 0 0.5rem 0 0; }\n      .fifty:nth-of-type(2) { margin: 0 0 0 0.5rem; }\n      textarea { border-radius: 1rem; width: 100%; outline: none !important; padding: 0.3rem; height: 22rem; border-color: rgba(0,0,0,0.2); }\n      input[type=text] { border-radius: 1rem; outline: none !important; border-color: rgba(0,0,0,0.2); }\n      .log { margin: 0 1rem; }\n      button { border-radius: 1rem; }\n      .output-container { position: relative; }\n      .output-container::after { content: \"\"; position: absolute; top: 0; left: 0; width: 100%; height: 100%; font-size: 3rem; overflow: hidden; text-align: center; line-height: 22rem; border-radius: 1rem; opacity: 0; transition: all 0.3s ease-in-out; pointer-events: none; }\n      .output-container.copied::after { content: \"Copied!\"; background-color: #2d882d; color: #004400;  opacity: 0.5;}\n      .output-container.failed::after { content: \"Failed :(\"; background-color: #aa3939; color: #550000;  opacity: 0.5;}\n      #wrapper { padding-top: 1em; border-top: 1px solid rgba(0,0,0,0.2); }\n      .bubble { background: rgba(25,25,100,0.15); border-radius: 1rem; margin: 0 0.5rem; padding: 0.5rem 1rem; }\n      .bubble.good { background: rgba(0,100,0,0.15); }\n      .bubble.bad { background: rgba(100,0,0,0.15); }\n      .bubble p, .bubble ul { margin: 0; }\n    </style>\n  </head>\n  <body>\n    <div>\n    <h1>SCP title-fetching tool v2.3</h1>\n    <p>Made by Croquembouche for the SCP wiki news. This tool uses <a href=\"https://codetabs.com/cors-proxy/cors-proxy.html\">CodeTabs CORS Proxy</a>.</p>\n    <p>For each line, %%actual-title%% will be replaced with the title of the <b>first</b> correctly-formatted SCP mentioned on that line.</p>\n    <p>Use SCP URLs instead of names - i.e., \"scp-botnik-j\" as opposed to \"SCP-\\̅\\̅\\̅\\̅-J\"</p>\n    <div class=\"hundred\">\n      <div class=\"good bubble\">\n        <p>Supports:</p>\n        <ul>\n          <li>Series I - VII</li>\n          <li>Jokes</li>\n          <li>Author pages</li>\n        </ul>\n      </div>\n      <div class=\"bad bubble\">\n        <p>Does not support:</p>\n        <ul>\n          <li>Tales, GoIs</li>\n          <li>Proposals</li>\n          <li>EX, ARC, translations</li>\n        </ul>\n      </div>\n    </div>\n    <p>Usage: Paste a list of SCPs into the box from <a href=http://www.scp-wiki.net/site-news-automator>the site news automator</a>. Evaluate the list and review the log underneath to see if there are any errors. If there aren't, or if you don't care, hit Fetch.</p>\n    <p>If the list is changed after evaluating it, make sure to re-evaluate before fetching again.</p>\n    <div id=\"wrapper\">\n      <div class=\"hundred\">\n        <div class=\"fifty\">\n          <textarea id=\"input\" placeholder=\"Input\"></textarea>\n        </div>\n        <div class=\"fifty output-container\">\n          <textarea id=\"output\" placeholder=\"Output\"></textarea>\n        </div>\n      </div>\n      <p><input type=\"checkbox\" id=\"replaceAuthor\"> Replace author names with author pages</p>\n      <div id=\"authorOnly\" style=\"display: none;\">\n        <p>Regular expression to search for: <input id=\"authorSearch\" value=\"by \\[\\[\\*user (.*)\\]\\]\"></p>\n        <p>Replace matches with: <input id=\"matchReplace\" value=\"by [[[$2 | $1]]]\"></p>\n        <p>Replace misses with: <input id=\"missReplace\" value=\"by $1\"></p>\n      </div>\n      <p>\n        <button type=\"button\" id=\"fetch\">Evaluate list</button>\n        <button type=\"button\" id=\"clear\">Clear log</button>\n        <button type=\"button\" id=\"pull\" disabled>Fetch titles</button>\n        <button type=\"button\" id=\"copy\" disabled style=\"float: right;\">Copy output</button>\n      </p>\n      <div class=\"log\">\n        <p>Waiting for input...</p>\n      </div>\n    </div>\n    </div>\n  </body>\n[[/html]]",
  "tags": [
    "fragment"
  ],
  "author": "Croquembouche",
  "created_at": "2018-06-13T12:44:13+00:00",
  "updated_at": "2021-08-10T01:55:57+00:00",
  "rating": 3,
  "_site": "scp-wiki",
  "_fullname": "fragment:site-news-title-fetcher"
}