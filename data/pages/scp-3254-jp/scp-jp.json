{
  "title": "SCP-3254-JP",
  "content": "[[include :scp-jp:credit:start]]\n**タイトル:** SCP-3254-JP - ノライ温度\n**著者:** [[*user hitsujikaip]]\n**作成年:** 2024\n[[include :scp-jp:credit:end]]\n\n**アイテム番号:** SCP-3254-JP\n\n**オブジェクトクラス:** Euclid\n\n**特別収容プロトコル:** SCP-3254-JPは、言語的表現に基づく異常特性を持つため、定期的に音声、筆記、その他媒体における呪いに関する言語表現を収集し、意味論・語用論の観点から分類してください。また、異常性の安定的統御を維持するため、インターネット上に存在する言語表現を収集し語彙目録を更新して、それぞれの語のコトダマ準位の推移を記録してください。\n\n**説明:** SCP-3254-JPは、呪いの温度です。この変則物理量は、呪い[[footnote]]呪い(repetitive recitation)とは、繰り返し告げること、または、その時告げられる事柄を指す。超常言語学においては、繰り返し伝達される記号の列のことを言い、結果や意思の内容に対して中立性が高い概念である。特に、呪いという概念は呪詛などの概念を含むが、これに限らない。\n\n「のろい」という語は動詞「のる」の未然形に反復を表す助詞「ふ」が接続した語「のらふ」の、ウ音便「のろう」から派生した連用形名詞である。[[/footnote]]に用いられる表現の選択に関する確率分布、表現を構成する語彙[[footnote]]ここでは、記号列の生成元を語(word)もしくはトークン(token)と呼び、その集まりを語彙(lexicon)という。[[/footnote]]のコトダマ準位、エランヴィタールエネルギー[[footnote]]一般化生体発躍エネルギー(Generalized EVE)[[/footnote]]を用いて、ノライ温度として定式化されています。SCP-3254-JPは、特定の呪術的条件下においてのみ定義されていますが、語彙の制約と呪いを呪詛として用いた際の有効性の関係を制御する理論として実用されています。\n\nコトダマ準位は語に込められた意思の強度[[footnote]]国学者の著書や伝統超常言語学の文脈ではこの強度をチハヤビという。[[/footnote]]によって決定されます。言語的な音声および記号列は、それぞれ特定のコトダマ準位を持ちますが、同一の語であっても、使用される文脈によって異なるコトダマ準位を持ちえます。また、等しい準位にある語同士であっても、その働きと意味は大きく異なります。一般に、コトダマ準位が高い語を持つ呪いは不安定であり、言霊を発しながら低い準位に遷移します。以下に示す表は、正負の軸によってコトダマ準位を解釈するための目安です。\n\n= 表1. コトダマ準位の例\n\n||~ 準位 ||~ ポジティブ ||~ ネガティブ ||\n||= [[$\\infty$]] || 十分長い期間[[footnote]]この「十分長い期間」は、言語変化の時間尺度に対して十分長い期間という意味である。これよりも長い尺度の現象は別の理論によらなければ制御できない。[[/footnote]]持続する強固な充実感を伴う || 即座に灼熱感をもたらし、十分長い期間持続する極度の不快感を伴う ||\n||= [[$\\vdots$]] || 安心感を伴う || 不快感を伴う ||\n||= [[$\\vdots$]] || 快感を伴う || 違和感を伴う ||\n||= [[$n = 0$]] ||||= 無意味語・中立的な語 ||\n\n**ノライ温度の定義と傾向:**\n\nノライ温度は、ある特定の個人や集団に属する人々が言語表現を行った際、言葉の選び方がどれだけ多様であるかを表すエントロピーを用いて定式化されます。[[$A_i$]]は、コトダマ準位[[$i$]]に対応する語彙です。この語彙は、同じ強度を持つ語が集まった事象として解釈されます。[[$P(A_i)$]]は、語彙[[$A_i$]]に属する語が選ばれる確率であり、その語が高頻度で使われるほど[[$P(A_i)$]]は大きくなります。ここで、[[$S$]]を以下のように定義することで、呪いのエントロピーを得ます。語の分布が均一な場合、つまり、様々なコトダマ準位に属する語を幅広く使用したとき、呪いのエントロピー[[$S$]]は大きくなりますが、分布が特定の事象に偏っている場合、つまり、一部のコトダマ準位に属する語のみを使用したとき、[[$S$]]は小さくなります。\n\n[[html]]\n<script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>\n\\[\nS = - \\sum_{A_i \\in \\Omega} P(A_i) \\log P(A_i)\n\\]\n[[/html]]\n\n呪いの温度[[$T$]]は、「エントロピー[[$S$]]がエランヴィタールエネルギー[[$U$]]によってどれくらい変わるか」を測る量です。[[$A_i$]]が選ばれる確率[[$P(A_i)$]]はエランヴィタールエネルギー[[$U$]]の変化に伴って、様々に変化します。このとき、ノライ温度は、[[$U$]]の変化に対して[[$S$]]がどれほどの割合で変化するかの値の逆数となります。つまり、温度の逆数[[$\\frac{1}{T}$]]が大きければ大きいほど、エランヴィタールエネルギー[[$U$]]が増加したときのエントロピー[[$S$]]の増加は大きくなります。\n\n[[html]]\n<script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>\n\\[\n\\frac{1}{T} = \\frac{\\partial S}{\\partial U}\n\\]\n[[/html]]\n\n正の低温時、少量でも強度のある語が混入すると、表現全体がその「意図」によって向きづけられ、エントロピーは大きく増大するため、この定式化は以下のドグマを反映しているととらえることができます。\n\n[[div class=\"dogma\"]]\n**言霊のドグマ**\n\n悪意がごく少量しか存在しない環境と、悪意が十分量混在する環境のそれぞれに同じ量の悪意が挿入されたとき、人間や自然[[footnote]]特に、言霊の反応がよい指標となる。[[/footnote]]は前者よりも後者に敏感に反応する。\n[[/div]]\n\nノライ温度は、呪詛とは限らない呪いに対して一般に定義されますが、応用上は呪詛のノライ温度がよく用いられています。下表は、ノライ温度を実際に計算するためのサンプルです。\n\n平静な状態にある被験者は基本的に準位の低い言葉を使用するため、低エントロピー状態ですが、少しストレスがかかるると、##crimson|準位の高い言葉##が混ざり始めるため、ストレスの増加に対応してエントロピーが増加します。エントロピーの変化はストレスとエネルギーが小さいうちは、正のノライ温度を示します。\n\nさらなるストレスを加えてエネルギーを増加させた場合、語彙の分布が一定の広さを持つ被験者はまだ準位の高い言葉に余裕があるため、エントロピーの増加傾向が維持され、同様に正のノライ温度を示します。しかしながら、語彙の分布が狭い被験者は一定のストレス量を超えた状態において##crimson|準位の高い言葉##を繰り返し使用する傾向があり、エントロピーが低下傾向に転じます。そのため、負のノライ温度という状況が生じます。\n\n= 表2. ストレスレベルおよび呪詛における言語表現の語彙変化\n\n||~ ストレスレベル ||~ エランヴィタールエネルギー[[$U$]] ||~ 語彙の分布が狭い被験者による表現 ||~ 語彙の分布が一定の広さを持つ被験者による表現 ||\n|| 平静状態 || 非常に小 || 「収容房の空調の掃除があるんだよね」「お前も大変だな」「まあ頑張ってみるよ」「了解」 || 「君が早起きするってことはエイリアンが居るってことだ」「練り消しに含んだ黒鉛と同じくらい曇天は好き」 ||\n|| 中度 || 小 || 「##brown|きつい##って」「マジで##brown|死ぬ##」「##brown|ふざけんな##」「##brown|だる##」「##brown|は？意味わかんね##」「##brown|いい加減##言うこと##brown|聞け##」 || 「自信があるのはいいことだね」「駅前だろうが交番の前だろうが深夜に遭ったら##brown|道変える##よね」「ルンバの##brown|餌にもならない##」 ||\n|| 高度 || 大 || 「##brown|死ね死ね死ね死ね死ね##」「##brown|だるいだるいだるい##」「##brown|なんでできないの？##」 [##brown|性別・門地・障碍者差別に関する倫理規定により自動的に規制##] || 「君はもうちょっと##crimson|できると思ってた##けど、##brown|勘違い##しちゃって##red|ごめん##」「こんなにフランクに話せる##brown|のに##なんで##red|まだ恋人じゃない##んだ……」 ||\n\n[[html]]\n<!DOCTYPE html>\n<html lang=\"ja\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ノライ温度</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+JP&display=swap\" rel=\"stylesheet\">\n</head>\n\n<body>\n    <style>\n        :root {\n            --main-color: #3e524b;\n            --main-bg-color: #ffffff;\n        }\n\n        body {\n            background-color: var(--main-bg-color);\n            color: var(--main-color);\n            font-family: \"IBM Plex Sans JP\", serif;\n            font-size: 14px;\n        }\n\n        table {\n            width: 100%;\n            margin-bottom: 20px;\n        }\n\n        .table-lb {\n            width: 12em;\n        }\n\n        .table-n {\n            width: fit-content;\n        }\n\n        td {\n            padding: 5px;\n            border: none;\n        }\n\n        input[type=\"text\"] {\n            font-family: \"IBM Plex Sans JP\", serif;\n            font-size: 14px;\n            width: 90%;\n            margin: 2px;\n            padding: 10px;\n            background-color: var(--main-bg-color);\n            color: var(--main-color);\n            border: 1px solid var(--main-color);\n        }\n\n        button {\n            background-color: var(--main-color);\n            color: var(--main-bg-color);\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button:hover {\n            background-color: var(--main-color);\n        }\n\n        #result {\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        #message {\n            margin-bottom: 20px;\n            font-size: 18px;\n        }\n\n        #entropy-container canvas {\n            max-width: 900px;\n            max-height: 250px;\n            background-color: var(--main-bg-color);\n        }\n\n        #entropy-container {\n            margin-top: 20px;\n            font-size: 18px;\n        }\n\n        #entropy-polynomial-graph-container,\n        #temperature-graph-container {\n            text-align: center;\n        }\n\n        #entropy-polynomial-graph-container canvas,\n        #temperature-graph-container canvas {\n            max-width: 250px;\n            margin-left: auto;\n            margin-right: auto;\n            margin: 5px;\n        }\n\n        .padding-margin-block {\n            padding: 5px;\n            margin: 5px;\n        }\n\n        .big-bar {\n            margin: 40px 0;\n            border: 2px solid var(--main-color);\n        }\n\n        .small-bar {\n            margin: 10px 0;\n            border: 1px solid var(--main-color);\n        }\n\n        h1, h2 {\n            text-align: center;\n        }\n\n        #entropy-block, #temperature-block {\n            border: 2px solid #3e524b;\n            border-radius: 10px;\n            padding: 10px;\n            margin: 30px;\n            text-align: center;\n            transition: transform 0.3s ease-in-out;\n        }\n\n        #entropy-block:hover, #temperature-block:hover {\n            transform: scale(1.05);\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        #entropy-block h2, #temperature-block h2 {\n            font-size: 18px;\n            margin-bottom: 10px;\n        }\n\n        #entropy-container, #temperature-block table {\n            margin-left: auto;\n            margin-right: auto;\n            font-size: 16px;\n            text-align: center;\n            color: #3e524b;\n        }\n    </style>\n\n    <hr class=\"big-bar\">\n\n    <h1>簡易エントロピー測定機</h1>\n\n    <p>表現をトークンごとにスペースで区切って入力してください。また、それに対応する準位データ（整数）をスペースで区切って入力してください。</p>\n\n    <form id=\"simulatorForm\">\n        <table>\n            <tr>\n                <td class=\"table-lb\">\n                    <label for=\"input1\">表現</label>\n                </td>\n                <td class=\"table-n\">\n                    <input type=\"text\" id=\"input1\" name=\"input1\">\n                </td>\n            </tr>\n            <tr>\n                <td class=\"table-lb\">\n                    <label for=\"input2\">各語彙の準位データ</label>\n                </td>\n                <td class=\"table-n\">\n                    <input type=\"text\" id=\"input2\" name=\"input2\">\n                </td>\n            </tr>\n        </table>\n        <div class=\"padding-margin-block\">\n            <div id=\"entropy-block\">\n                <h2>エントロピー</h2>\n                <div id=\"entropy-container\">[ ? ]</div>\n            </div>\n        </div>\n        <button type=\"button\" onclick=\"simulate()\">解析</button>\n        <button type=\"button\" onclick=\"sample1(1)\">サンプル1</button>\n        <button type=\"button\" onclick=\"sample1(2)\">サンプル2</button>\n    </form>\n\n    <hr class=\"small-bar\">\n\n    <div id=\"result\">\n        <div id=\"message\"></div>\n        <h2>準位の可視化</h2>\n        <div class=\"padding-margin-block\"><div id=\"heatmap-container\">ここに解析結果が表示されます。</div></div>\n        <h2>語の分布</h2>\n        <div class=\"padding-margin-block\"><div id=\"dist-graph-container\">ここに解析結果が表示されます。</div></div>\n    </div>\n\n    <hr class=\"big-bar\">\n\n    <h1>ノライ温度の計算</h1>\n\n    <p>それぞれのストレスレベルでのエントロピーを入力してください。</p>\n\n    <form id=\"simulatorForm2\">\n        <table>\n            <tr>\n                <th>ストレスレベル</th>\n                <th>エントロピー</th>\n            </tr>\n            <tr>\n                <td class=\"table-lb\">\n                    <label for=\"val1\">平静状態</label>\n                </td>\n                <td class=\"table-n\">\n                    <input type=\"text\" id=\"val1\" name=\"val1\">\n                </td>\n            </tr>\n            <tr>\n                <td class=\"table-lb\">\n                    <label for=\"val2\">中度</label>\n                </td>\n                <td class=\"table-n\">\n                    <input type=\"text\" id=\"val2\" name=\"val2\">\n                </td>\n            </tr>\n            <tr>\n                <td class=\"table-lb\">\n                    <label for=\"val3\">高度</label>\n                </td>\n                <td class=\"table-n\">\n                    <input type=\"text\" id=\"val3\" name=\"val3\">\n                </td>\n            </tr>\n        </table>\n        <div id=\"temperature-block\">\n            <h2>ノライ温度</h2>\n            <table>\n                <tr><td>平静状態</td><td><div id=\"temperature-container-1\">[ ? ]</div></td></tr>\n                <tr><td>中度</td><td><div id=\"temperature-container-2\">[ ? ]</div></td></tr>\n                <tr><td>高度</td><td><div id=\"temperature-container-3\">[ ? ]</div></td></tr>\n            </table>\n        </div>\n        <button type=\"button\" onclick=\"simulate_temp()\">解析</button>\n        <button type=\"button\" onclick=\"sample2(1)\">サンプル1</button>\n        <button type=\"button\" onclick=\"sample2(2)\">サンプル2</button>\n    </form>\n\n    <hr class=\"small-bar\">\n\n    <div id=\"result-sub\">\n        <div id=\"message-sub\"></div>\n        <div class=\"padding-margin-block\">\n            <h2>エントロピー - ストレス グラフ</h2>\n            <div id=\"entropy-polynomial-graph-container\">ここに解析結果が表示されます。</div>\n        </div>\n        <div class=\"padding-margin-block\">\n            <h2>ノライ温度 - ストレス グラフ</h2>\n            <div id=\"temperature-graph-container\">ここに解析結果が表示されます。</div>\n        </div>\n    </div>\n\n    <hr class=\"big-bar\">\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        const text_label = {\n            \"integer\": \"準位データにはスペースで区切られた整数の列を入力してください。\",\n            \"size\": \"トークンの数と準位データの数が一致していません。同じ個数のデータを入力してください。\",\n            \"empty\": \"データが空です。\",\n            \"space\": \"区切り文字が過剰に挿入されています。\",\n            \"done\": \"完了\",\n            \"prob\": \"確率\",\n            \"level\": \"準位\",\n            \"entropy\": \"S = \",\n            \"integer-sub\": \"整数を入力してください。\",\n            \"diverge\": \"発散\",\n        };\n        const sample_data = {\n            1: {\n                \"input1\": \"カス 死ねや だるい だるい だるい だるい だるい だるい だるい だるい だるい だるい\",\n                \"input2\": \"4 8 4 4 4 4 4 4 4 4 4 4\",\n            },\n            2: {\n                \"input1\": \"君は もう ちょっと できると 思ってた けど 勘違い しちゃって ごめん\",\n                \"input2\": \"1 1 1 4 6 2 7 2 5\",\n            },\n        }\n        const sample_data2 = {\n            1: {\n                \"val1\": \"0.2\",\n                \"val2\": \"1.1\",\n                \"val3\": \"0.1\",\n            },\n            2: {\n                \"val1\": \"0.5\",\n                \"val2\": \"1.5\",\n                \"val3\": \"1.6\",\n            },\n        }\n\n        function sample1(i) {\n            document.getElementById('input1').value = sample_data[i].input1;\n            document.getElementById('input2').value = sample_data[i].input2;\n            simulate();\n        }\n        function sample2(i) {\n            document.getElementById('val1').value = sample_data2[i].val1;\n            document.getElementById('val2').value = sample_data2[i].val2;\n            document.getElementById('val3').value = sample_data2[i].val3;\n            simulate_temp();\n        }\n        function simulate() {\n            const messageElement = document.getElementById('message');\n\n            var input1Array = document.getElementById('input1').value.split(/[ ,|]/g);\n            var input2Array = document.getElementById('input2').value.split(/[ ,|]/g);\n            var ok = true;\n\n            var input2Int = input2Array.map(function (item) {\n                var parsed = parseInt(item, 10);\n                if (isNaN(parsed)) {\n                    return null;\n                }\n                return parsed;\n            });\n\n            if (input1Array.length !== input2Array.length) {\n                messageElement.innerText = text_label[\"size\"];\n                ok = false;\n            }\n\n            if (input2Int.includes(null)) {\n                messageElement.innerText = text_label[\"integer\"];\n                ok = false;\n            }\n\n            if (document.getElementById('input1').value == \"\" || document.getElementById('input2').value == \"\") {\n                messageElement.innerText = text_label[\"empty\"];\n                ok = false;\n            } else {\n                if (input1Array.includes('')) {\n                    messageElement.innerText = text_label[\"space\"];\n                    ok = false;\n                }\n            }\n\n            console.log({ ok, input1Array, input2Array, input2Int });\n            if (ok) {\n                var level_distribution = {};\n                input2Int.forEach(function (i) {\n                    if (level_distribution[i] === undefined) {\n                        level_distribution[i] = 1;\n                    } else {\n                        level_distribution[i]++;\n                    }\n                });\n                for (const i in level_distribution) {\n                    level_distribution[i] = level_distribution[i] / input2Int.length;\n                }\n\n                var entropy = 0;\n                for (const i in level_distribution) {\n                    entropy -= level_distribution[i] * Math.log(level_distribution[i])\n                }\n\n                var result = {\n                    \"dist\": level_distribution,\n                    \"entropy\": entropy,\n                    \"text\": input1Array,\n                    \"level\": input2Int,\n                };\n\n                messageElement.innerText = text_label[\"done\"];\n                showData(result);\n            }\n        }\n        function showData(result) {\n            const graphElement = document.getElementById('dist-graph-container');\n            const entropyElement = document.getElementById('entropy-container');\n            const heatmapContainer = document.getElementById('heatmap-container');\n\n            heatmapContainer.innerHTML = '';\n            graphElement.innerHTML = '';\n\n            const levels = [];\n            const probabilities = [];\n            const minLevel = Math.min(...Object.keys(result.dist).map(Number));\n            const maxLevel = Math.max(...Object.keys(result.dist).map(Number));\n\n            result[\"text\"].forEach((word, index) => {\n                const level = result[\"level\"][index];\n                const intensity = (maxLevel - minLevel) === 0 ? 0.5 : (level - minLevel) / (maxLevel - minLevel);\n                const color = `rgb(${Math.floor(255 * intensity)}, 0, 0)`;\n                const span = document.createElement('span');\n                span.style.color = color;\n                span.textContent = word + ' ';\n                heatmapContainer.appendChild(span);\n            });\n\n            for (let i = minLevel; i <= maxLevel; i++) {\n                levels.push(i);\n                probabilities.push(result.dist[i] || 0);\n            }\n\n            const canvas = document.createElement('canvas');\n            graphElement.appendChild(canvas);\n\n            new Chart(canvas, {\n                type: 'bar',\n                data: {\n                    labels: levels,\n                    datasets: [{\n                        label: text_label[\"prob\"],\n                        data: probabilities,\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    animation: false,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            title: {\n                                display: true,\n                                text: text_label[\"prob\"],\n                            }\n                        },\n                        x: {\n                            title: {\n                                display: true,\n                                text: text_label[\"level\"],\n                            }\n                        }\n                    }\n                }\n            });\n\n            entropyElement.innerText = text_label[\"entropy\"] + result.entropy.toFixed(4);\n        }\n        function simulate_temp() {\n            const messageElement = document.getElementById('message-sub');\n            const val1 = parseFloat(document.getElementById('val1').value);\n            const val2 = parseFloat(document.getElementById('val2').value);\n            const val3 = parseFloat(document.getElementById('val3').value);\n\n            if (isNaN(val1) || isNaN(val2) || isNaN(val3)) {\n                messageElement.innerText = text_label[\"integer-sub\"];\n                return;\n            }\n\n            const x1 = 0, x2 = 2, x3 = 4;\n\n            const a = ((val3 - val1) - (val2 - val1) * (x3 - x1) / (x2 - x1)) / ((x3 * x3 - x1 * x1) - (x2 * x2 - x1 * x1) * (x3 - x1) / (x2 - x1));\n            const b = ((val2 - val1) - a * (x2 * x2 - x1 * x1)) / (x2 - x1);\n            const c = val1 - a * x1 * x1 - b * x1;\n\n            console.log(`Quadratic function: y = ${a.toFixed(4)}x^2 + ${b.toFixed(4)}x + ${c.toFixed(4)}`);\n\n            const graphCanvas = document.createElement('canvas');\n            document.getElementById('entropy-polynomial-graph-container').innerHTML = '';\n            document.getElementById('entropy-polynomial-graph-container').appendChild(graphCanvas);\n\n            const pl = function (x) {\n                return a * x * x + b * x + c;\n            }\n\n            mathGraph(pl, graphCanvas, 400, 400, 0, 0);\n\n            const plTemp = function (x) {\n                if (2 * a * x + b == 0) {\n                    return 0;\n                }\n                return 1 / (2 * a * x + b);\n            }\n\n            const graphCanvas2 = document.createElement('canvas');\n            document.getElementById('temperature-graph-container').innerHTML = '';\n            document.getElementById('temperature-graph-container').appendChild(graphCanvas2);\n\n            mathGraph(plTemp, graphCanvas2, 400, 800, 0, 400);\n\n            const tempVal = [x1, x2, x3].map(function (x) {\n                const y = plTemp(x);\n                if (y == 0) {\n                    return text_label[\"diverge\"];\n                } else {\n                    return y;\n                }\n            });\n\n            document.getElementById('temperature-container-1').innerText = tempVal[0];\n            document.getElementById('temperature-container-2').innerText = tempVal[1];\n            document.getElementById('temperature-container-3').innerText = tempVal[2];\n        }\n        function mathGraph(f, graphCanvas, widthG, heightG, offsetX, offsetY) {\n            const dataPoints = [];\n            for (let x = 0; x <= 4; x += 0.05) {\n                const y = f(x);\n                dataPoints.push({ x, y });\n            }\n\n            graphCanvas.width = widthG;\n            graphCanvas.height = heightG;\n\n            const context = graphCanvas.getContext('2d');\n\n            context.clearRect(0, 0, graphCanvas.width, graphCanvas.height);\n\n            context.beginPath();\n            for (let x = 0; x <= graphCanvas.width; x += 50) {\n                context.moveTo(x, 0);\n                context.lineTo(x, graphCanvas.height);\n            }\n            for (let y = 0; y <= graphCanvas.height; y += 50) {\n                context.moveTo(0, y);\n                context.lineTo(graphCanvas.width, y);\n            }\n            context.strokeStyle = '#e0e0e0';\n            context.lineWidth = 1;\n            context.stroke();\n\n            context.beginPath();\n            context.moveTo(0, graphCanvas.height - offsetY);\n            context.lineTo(graphCanvas.width, graphCanvas.height - offsetY);\n            context.strokeStyle = 'black';\n            context.lineWidth = 4;\n            context.stroke();\n\n            context.beginPath();\n\n            dataPoints.forEach((point, index) => {\n                const x = point.x * 100 + offsetX;\n                const y = graphCanvas.height - (point.y * 100 + offsetY);\n                if (x < 0 || x > graphCanvas.width || y < 0 || y > graphCanvas.height) {\n                    context.moveTo(x, y);\n                } else {\n                    context.lineTo(x, y);\n                }\n            });\n\n            context.strokeStyle = 'blue';\n            context.lineWidth = 2;\n            context.stroke();\n        }\n    </script>\n</body>\n\n</html>\n[[/html]]\n\n負のノライ温度が生じる現象は戌頭家などの呪術を専門とする一族や幸原家[[footnote]]現在では催馬楽家と称する。[[/footnote]]によって古くから記録されており、その現象の応用可能性も認知されていました。\n\n[[div class=\"blockquote\"]]\n[[div class=\"jp-classical\"]]\n[[span class=\"ruby\"]]懸有河[[span class=\"rt\"]]かけたりがは[[/span]][[/span]]の君、わがくにの[[span class=\"ruby\"]]禍言[[span class=\"rt\"]]まがごと[[/span]][[/span]]はもとより、からくに、海のほかに禍りを極めたる禍言を求め、「ばがすや」を得たり。 「ばがすや、ばがすや、ばがすや」と、やほよろずちたび祝らば、えもいはぬ物に禍るといふ。\n\nつひに、これや求むる禍言ならむと思ひて、ことあげし逆手を打ちて呪ひ、いかに猛きもののふといへどもあへず消ぬべし、と思ひて頼みを掛けたり。されども甲斐もなく敗れたり。\n[[/div]]\n------\n懸有河の君は、我が国の呪詛はもとより、中華、海外に呪詛の最高峰を求めて、「ばがすや^^1^^」を得た。「ばがすや、ばがすや、ばがすや」と何回も唱えれば、言うこともできない物によって災禍を被るという。\n\nついに、これが求める呪詛だろうと思って、言挙げして逆手を打って呪い、どんな勇猛な武人であっても耐えられず消えてしまうだろうと思って、これを頼りにした。しかし、甲斐なく敗れてしまった。\n------\n^^1^^ 梵語 भगास्य の音写と思われる。\n------\n[[span class=\"ruby\"]]戌頭猩尾持[[span class=\"rt\"]]いがしらのあかをもち[[/span]][[/span]]\n「禍目久佐」（[[[nx-74|『改定実用呪術史資料集』神音研究所]]]）\n[[/div]]\n\n[[div class=\"blockquote\"]]\n[[div class=\"jp-classical\"]]\n「ものは折節の言霊」といふ事、これなり。玉の緒の流れのたぎりて落つるは稀にこそ物恐ろしけれ。なべてたぎる湯のごときことえりは、かぞへてたやすく[[span class=\"ruby\"]]理[[span class=\"rt\"]]ことわ[[/span]][[/span]]りすべし。\n[[/div]]\n------\n「ものは折節の言霊」（文脈と機会に依存する言霊）というのはこのことである。生命の流動が滾って落下していく様は、まれであるからこそ恐ろしいものである。一様に滾っている湯のような言葉の選び方は、数えるだけで容易く言葉を分析され、理解されるのが当然である。\n------\n[[span class=\"ruby\"]]幸原[[span class=\"rt\"]]さきはら[[/span]][[/span]]研儀（[[span class=\"ruby\"]]丹日女[[span class=\"rt\"]]にひめ[[/span]][[/span]]）\n「いはれのいはひ」（[[[m-81-0020|『中世超常史』資料・斎蔵文書編]]]）\n[[/div]]\n\n近代化以降、呪詛事象が体系化されると、その媒体として生じる言霊を何らかのエネルギー伝達手段、もしくは破壊手段として利用することが試みられるようになりました。特に、異常事例調査局(IJAMEA)が設立した神音研究所などで盛んに研究が行われました。その中でも、人的資源の枯渇によって、専門の技術を持つわけではない人々による呪詛の利用が検討されていました。\n\n[[div class=\"blockquote\"]]\n兵員ニ力学的活力ヲ投入シ、此自リ得タル集合的呪詛熱カラ生ズル呪詛ヲ以テ呪殺ヲ遂行スルトイフ構想ハ、小治田氏ノ提唱スル人言熱機関ノ理論ガ真デアルコトヲ仮定スルナラバ、極テ自然ナルモノデアル。\n------\n催馬楽喜多男「集合的呪詛熱ノ研究」『異常事例調査局紀要』\n[[/div]]\n\n呪詛の起点を非専門家に広げることで対処の困難性を確保できるため、この技術は注目されていましたが、このような取り組みは複数の原因によって行き詰りました。\n\n* 語彙に制限がないと、ストレスを増加させた場合でも呪いに用いられる語が幅広いコトダマ準位に分布し、エントロピーが増加し続ける\n* 高エントロピーな呪いは呪詛としての挙動と帰結の予測が困難になり、利用に向かない\n\n言語表現の形式のみに着目した呪いを、作用まで考慮された実用呪詛に構成するには、何らかの形で呪詛事象を支配する原則の固有性と局所性[[footnote]]\n詳細は[[[secure-facility-dossier-site-81et|計堂(2023)]]]を参照してください。以下は積理学派による注釈です。\n\n-----\n\n呪詛事象について、自明な法則を除き、一定の基準[[$\\mho$]]を満たす法則が大域的には存在しないことが知られている。ただし、この言明や呪詛の公理は条件[[$\\mho$]]を満たさない。また、呪詛事象の包括的な定義は知られていないが、以下のようなネーティ言明の族を被覆としてとることができる。\n\n[[div class=\"dogma\"]]\n[[span class=\"ruby\"]]斯くして教えは[[span class=\"rt\"]]athāta ādeśaḥ[[/span]][[/span]]、\n\n「[[span class=\"ruby\"]]然らず。然らず。[[span class=\"rt\"]]na-iti na-iti[[/span]][[/span]]」\n\n[[span class=\"ruby\"]]故に、これのほかになく、「然らず。」を超えるものなし[[span class=\"rt\"]]na hy etasmād iti na-ity anyat param asti[[/span]][[/span]]。\n[[>]]\n\n[[span class=\"ruby\"]]ブリハッド・アーラニヤカ・ウパニシャッド[[span class=\"rt\"]]bṛhadāraṇyaka-upaniṣad[[/span]][[/span]] 2-3-6\n[[/>]]\n[[/div]]\n\nこれはapophasisまたはapabhāṣaを含む呪いトポイ(recitation topoi)における否定と形式化されるが、二重否定を簡略化できず、古典論理の範疇にはない。\n\n[[/footnote]]を回避する必要がありますが、その対策をせず、単に偶発的に生じた呪いの作用を集めた呪詛は指向性と収束性に欠けていました。\n\n近年まで、呪詛の芽(germ)、つまり局所的に見れば一つの固有原則で扱える「呪詛事象」の集まりを人工的に取り出すことは困難であると考えられていました。しかし、人の入手する情報の多くをインターネットが占めるようになったため、これを統御することで、呪いの構成方法は不可知であるが、生じた呪詛をその原則と解によって選択的に増幅することができる意味論共鳴機の実装が現実的になりました。\n\n財団は、この意味論共鳴機を用いて、**KASER**(Kotodama Amplification by Stimulated Emission of Radiation)を開発しました。KASERは、一定尺度の範疇では同一原則で扱えるコヒーレントな呪術ビームを継続して発生させる装置であり、現在においては特殊対人任務や呪術対抗措置として正常性維持に利用されています。この技術は、以下に示すように負のノライ温度を持つ状況と密接にかかわる技術であり、SCP-3254-JPの研究を基礎として開発が行われました。\n\n[[div class=\"blockquote\"]]\n= **反転分布の形成**\n# 注意力や集中力の低下をもたらすミーム、過酷な社会環境、プラットフォームの仕様などの要因を調整することによって、ユーザーの使用語彙を一定のレベルに制限した状態を維持する。\n# 呪いの発振者(Oscinfluencer)の近傍に常にストレッサーを配置する。特に、「怒り」は瞬間的に生じて、容易に視野狭窄を引き起こすことができるため、情報流通システムの保有者に対してインセンティブを与えるなどの手法で、発振者の「怒り」を誘発する情報に接触する機会を増やす。\nこれらのエネルギーの投入を怒りポンピング(Irritical Pumping)という。怒りポンピングを行うことによって、負のノライ温度を持つ語彙分布を形成し、維持する。\n\n= **誘導放出**\n# 発振者による呪いから発せられた言霊によって、別の発振者による呪いが低いコトダマ準位へと遷移し同波長の言霊を発する。\n# これらによって生じた言霊は、波長の合致する言霊のみと共鳴するため、提示する情報の調整によって、特定のコトダマ準位の差に相当する波長を持つ言霊を選択的に増幅することが可能となる。\nSNSでは、ユーザー間で特定の言葉や感情が増幅され、共鳴する「エコーチェンバー」として機能している。これを呪いの意味論共鳴機(Semantic Resonator)として利用し、KASERの発振機構に組み込むことで、安定的かつ均質な呪いを選択的に増幅させる。\n[[/div]]\n\nこの技術の画期的な点は、語彙の選択肢を意図的に制限することでコトダマ準位を頭打ちにし、その状態に外部からエネルギーを継続的に供給することで、コトダマ準位の高い場所に多くの語彙が集まった低エントロピーの状態を維持できる点にあります。また、SNSが持つエコーチェンバーの特性を意味論共鳴機として活用することで、語彙分布が広い個人であっても準位を強制的に狭め、特定の語彙や感情表現を選択的に増幅する仕組みを形成することが可能となりました。\n\n[[collapsible show=\"+ 脚注\" hide=\"- 閉じる\"]]\n[[footnoteblock]]\n[[/collapsible]]\n\n[[module CSS]]\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@600&display=swap');\n.jp-classical {\n\tfont-family: \"Noto Serif JP\", serif;\n\tfont-size: 1.2em;\n\tfont-weight: 600;\n}\n.dogma {\n    text-align: center;\n    padding: 1em;\n    margin: 1em;\n    border: 1px solid black;\n}\n[[/module]]",
  "tags": [
    "euclid",
    "jp",
    "scp",
    "エントロピー",
    "オンライン",
    "数学",
    "概念",
    "熱力学",
    "確率",
    "言語",
    "非実体"
  ],
  "author": "hitsujikaip",
  "created_at": "2024-12-27T10:54:24+00:00",
  "updated_at": "2024-12-28T03:50:17+00:00",
  "rating": 23,
  "_site": "scp-jp",
  "_fullname": "scp-3254-jp"
}