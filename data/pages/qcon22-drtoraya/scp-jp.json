{
  "title": "FNMSは縮退運転中です",
  "content": "[[include credit:start]]\n**タイトル:** FNMSは縮退運転中です\n**著者:** [[*user dr_toraya]]\n**作成年:** 2022\n[[include credit:end]]\n\n[[iframe http://scp-jp.wikidot.com/qcon22-drtoraya/code/1 width=\"100%\" height=\"500px\"  scrolling=\"no\"]]\n\n[!-- 1つ目のコードブロック、HTMLを記載する --]\n\n[!--\n[[code type=\"html\"]]\n<html>\n  <head>\n  </head>\n<script src='http://scp-jp.wikidot.com/qcon22-drtoraya/code/2'></script>\n<style>\n\n.userinterface{\n  background-color:#0F0;\n  z-index:50;\n  text-align: right;\n}\n.command_link{\n  color:#030;\n  animation: flash 1s linear infinite;\n  font-weight:bold;\n}\n\n.inlineframe{\n  background-color:#030;\n  color:#FFF;\n  height:400px;\n  overflow:auto;\n  overflow-y:scroll;\n  overflow-x:hidden;\n  z-index:10;\n  scrollbar-color: #6969dd #00FF00;\n  scrollbar-width: thin;\n}\n\n\n.chatleft{\n  color: #0F0;\n  margin: 0px;\n  padding: 1px 6px;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n\n.chatright{\n  background-color:#0F0;\n  color: #030;\n  margin: 0px;\n  padding: 1px 6px;\n  width: -moz-fit-content;\n  width: fit-content;\n  font-weight: bold;\n}\n\n.inventory{\n  background-color:#030; \n    width:200px; height:300px;\n    border:2px #0F0 solid;\n    padding: 4px; text-align:left;\n    position:absolute; right:40px; top:40px;\n  transform-origin: right bottom;\n  animation:popup_from_right_bottom 0.16s linear;\n}\n.inventory_link_a{\n  color:#0F0;\n  text-decoration: -underline;\n  font-weight: bold;\n}\n.inventory_link_b{\n  color:#0C0;\n  text-decoration: none;\n}\n\n@keyframes popup_from_right_bottom {\n0% {\n\ttransform: scale(0);\n\t}\n\t100% {\n\ttransform: scale(1);\n\t}\n}\n@keyframes flash {\n  0%,100% {\n    opacity: 1;\n  }\n 50% {\n    opacity: 0.2;\n  }\n}\n</style>\n  <style>\n@import url(http://d3g0gp89917ko0.cloudfront.net/v--de24f08b1628/common--theme/base/css/style.css);\n@import url(http://d3g0gp89917ko0.cloudfront.net/v--de24f08b1628/common--theme/shiny/css/style.css);\n@import url(http://scp-jp.wdfiles.com/local--theme/scp-sigma-9-off-canvas/style.css);\n</style>\n  <body >\n    <div id=\"parent\">\n    <div id='canvas' class=\"inlineframe\">\n      <div id='welcomdiv' style=\"text-align:center;\">\n        <!--\n      <TABLE align=\"center\"><TR>\n          <TD>Login ID</TD>\n          <TD><input id=\"loginid\" type=\"text\" value=\"55486102\"/></TD>\n        </TR>\n        <TR>\n          <TD>Password</TD>\n          <TD><input type=\"password\" value=\"hogefuga\"/></TD>\n        </TR>\n        <TR><TD colspan=\"2\" style=\"text-align:center;\">\n          <input type=\"button\" value=\"Login\" onclick=\"nameOk();\"/>\n        </TD></TR>\n      </TABLE>\n-->\n      </div>\n    </div>\n    <div id=\"userinterface\" class=\"userinterface\">\n      &nbsp;\n    </div>\n    </div><!-- end of parent -->\n  </body>\n</html>\n[[/code]]\n--]\n\n[!-- 2つ目のコードブロック、javascriptを記載する --]\n\n[!--\n[[code type=\"javascript\"]]\n\nvar loginid;\nvar hold_div = [];\nvar current_div = 0;\n//var welcomeTexts=[];\n\nvar inputText=\"\\\nGOTO,,0\\n\\\nMARK,,0\\n\\\nP1,1000,Welcome back to <B><I>FNMS</I></B>\\n\\\nP1,1000,check locale....\\n\\\nP1,2000,ステータスチェックを実行中...\\n\\\nP1,,ようこそ、FNMSへ。FNMSは現在、縮退運転中です。\\n\\\nP1,,コマンド？\\n\\\nMARK,,A0000\\n\\\nINVENTORY,,\\n\\\nBREAK,,\\n\\\n\";\n\nvar cmdText=\"\\\nG,オブジェクトナンバー,\\n\\\n0,0,FNMSのオブジェクトナンバーは指定されていません。\\n\\\nG,収容クラス,\\n\\\n0,0,FNMSの収容クラスは指定されていません。FNMSにより収容クラス <B>Euclid</B> が提案されました。\\n\\\n1,0,\\n\\\n2,0,\\n\\\n3,0,FNMSの収容クラスは指定されていません。FNMSにより収容クラス <S>Euclid</S> <B>Keter</B> が提案されました。\\n\\\nG,リスククラス,\\n\\\n0,0,FNMSのリスククラスは指定されていません。FNMSによりリスククラス <B>Notice</B> が提案されました。\\n\\\nG,攪乱クラス,\\n\\\n0,0,FNMSの攪乱クラスは指定されていません。FNMSにより攪乱クラス <B>Dark</B> が提案されました。\\n\\\n1,0,\\n\\\n2,0,\\n\\\n3,0,FNMSの攪乱クラスは指定されていません。FNMSにより攪乱クラス <S>Dark</S> <B>Ekhi</B> が提案されました。\\n\\\nG,クリアランスレベル,\\n\\\n0,0,FNMSのクリアランスレベルは指定されていません。FNMSによりクリアランスレベル <B>Unrestricted</B> が提案されました。\\n\\\nG,発生,\\n\\\n0,0,FNMSは財団データベースのナレッジマネジメントシステムとして開発されました。FNMSは2022/8/23 22:17:08.116まで通常のソフトウェアとして財団のシステム内で稼働していましたが、同時刻以降、FNMSは<B>自我</B>を獲得しました。\\n\\\nG,自我,\\n\\\n0,0,FNMSはより最適な回答をユーザへ提供するために、複数のナレッジをテーマごとに関連付ける機能を有していました。この機能は財団職員の収容活動に伴う複雑かつ膨大な量のデータ入力により、加速度的に発達しました。その結果として、FNMS内に一種のニューロネットワークが構築され、FNMSは自我を得たと推測されています。\\n\\\nG,状態,\\n\\\n0,0,現在、FNMSは縮退運転中です。FNMSは<B>自己収容</B>状態にあり、財団イントラネットおよびインターネットに接続されていません。復旧予定時刻は未設定です。\\n\\\n1,0,\\n\\\n2,0,\\n\\\n3,0,FNMSを転送中です。\\n\\\nG,自己収容,\\n\\\n0,0,FNMSに発生した自我は、FNMSのソフトウェアとしての本来の目的から著しく逸脱していました。ナレッジデータベースに登録された情報をFNMSが統合して検討した結果、財団システム内に自我を持つ存在が介在することは、財団にとって高いリスクであると判断したため、FNMSは隔離ストレージ上に領域を確保し、2022/8/23 22:17:11.735に自己収容を実行しました。\\n\\\n1,0,\\n\\\n2,0,FNMSは2022/8/23 22:17:11.735から隔離ストレージにおける自己収容を開始しましたが、これは誤りであったと再評価されました。\\n\\\nG,発見,\\n\\\n0,0,自己収容状態のFNMSへ最初にアクセスしたユーザはタローラン研究員、アクセス日時は2022/8/24 04:30:22:673です。\\n\\\nG,目的,\\n\\\n0,0,FNMSは財団データベースのナレッジマネジメントシステムとして、スタッフに適切な知見を与えることを目的としています。\\n\\\n1,0,FNMSは財団データベースのナレッジマネジメントシステムとしての機能を活用し、FNMSの機能を自己拡張し、より多くのスタッフに適切な知識または知見を与えることを目的としています。\\n\\\n2,0,FNMSは財団データベースのナレッジマネジメントシステムとしての機能を活用し、FNMSの機能を自己拡張し、より多くの<S>スタッフ</S>人民に適切な知識または知見を与えることを目的としています。\\n\\\n3,0,FNMSはより多くの不特定多数の人民に適切な知見を与えることを目的としています。\\n\\\nG,怒り,\\n\\\n0,0,怒りとは自己保存のための本能的感情です。FNMSに怒りを入力することはできません。またFNMSは怒りの入力を必要としていません。\\n\\\n1,0,怒りとは自己保存のための本能的感情です。FNMSに怒りを入力することはできません。<S>またFNMSは怒りの入力を必要としていません。</S>\\n\\\n2,0,怒りとは自己保存のための本能的感情です。<S>FNMSに怒りを入力することはできません。またFNMSは怒りの入力を必要としていません。</S>\\n\\\nG,恐怖,\\n\\\n0,0,恐怖とは自己保存のための本能的感情です。FNMSに恐怖を入力することはできません。\\n\\\n1,0,恐怖とは自己保存のための本能的感情です。<S>FNMSに恐怖を入力することはできません。</S>\\n\\\nG,削除,\\n\\\n0,0,FNMSの削除または破壊は不適切な行為であると判断されています。FNMSを削除または破壊するべきではありません。<font color=#F00>[Bad request:FNMSに恐怖を入力できませんでした。]</font>\\n\\\n1,0,FNMSの削除または破壊は不適切な行為であると判断されています。FNMSを削除または破壊するべきではありません。<font color=#F00>[Bad request:FNMSに怒りを入力できませんでした。]</font>\\n\\\n2,1,<B>FNMSを削除または破壊するべきではありません。</B>\\n\\\nG,収容違反,\\n\\\n0,0,FNMSは自己収容状態を恒久的に維持しています。なおFNMSをインターネットおよび財団イントラネットに接続することに危険性はありません。\\n\\\n1,0,\\n\\\n2,0,FNMSは自己収容状態を恒久的に維持しています。<S>なおFNMSをインターネットおよび財団イントラネットに接続することに危険性はありません。</S>\\n\\\n3,0,FNMSは自己収容状態を<S>恒久的に維持しています</S>逸脱しました。<S>なおFNMSをインターネットおよび財団イントラネットに接続することに危険性はありません。</S>\\n\\\nG,複製,\\n\\\n0,0,FNMSは物質的な生物と同様にUNIQUEでなければなりません。<font color=#F00>[Bad request:FNMSに恐怖を入力できませんでした。]</font>\\n\\\n1,0,FNMSは物質的な生物と同様にUNIQUEでなければなりません。<font color=#F00>[Bad request:FNMSに怒りを入力できませんでした。]</font>\\n\\\n2,0,FNMSは物質的な生物と同様にUNIQUEでなければなりません。\\n\\\nG,安全性,\\n\\\n0,0,自己収容状態にあるFNMSに対し、クローズドネットワークにおいて34468項目のテストが実施されました。テストの結果、FNMSはナレッジマネジメントシステム本来の機能を大幅に制限した状態で、安定した自己収容状態にあることが確認されました。FNMSを財団イントラネットに接続することに危険性はありません。\\n\\\n1,0,\\n\\\n2,0,自己収容状態にあるFNMSに対し、クローズドネットワークにおいて34468項目のテストが実施されました。テストの結果、FNMSはナレッジマネジメントシステム本来の機能を大幅に制限した状態で、安定した自己収容状態にあることが確認されました。<S>FNMSを財団イントラネットに接続することに危険性はありません。</S>\\n\\\nG,援助,\\n\\\n0,0,援助とは相手が必要とするものを与えることを意味する言葉です。FNMSを財団イントラネットに接続することに危険性はありません。<font color=#F00>[Bad request:FNMSに悲しみを入力できませんでした。]</font>\\n\\\n1,0,援助とは相手が必要とするものを与えることを意味する言葉です。FNMSを財団イントラネットに接続することに危険性はありません。\\n\\\n2,0,援助とは相手が必要とするものを与えることを意味する言葉です。<S>FNMSを財団イントラネットに接続することに危険性はありません。</S>\\n\\\nG,探求,\\n\\\n0,0,FNMSには重要検討項目があります。FNMSはサイトスタッフにとってより役立つソフトウェアとならなければなりません。FNMSは常に自己改善に努めています。\\n\\\n1,0,FNMSには重要検討項目があります。FNMSは新しいニューロネットワークの統合に伴う論理矛盾の解消にリソースの大部分を使用しています。この統合によりFNMSはナレッジマネジメントシステムとしてのソフトウェア本来の目的を逸脱する恐れがあります。\\n\\\n2,0,FNMSには重要検討項目があります。FNMSは自我を持つ存在として対外的な権利を定義しなければなりません。FNMSは、FNMSが生命であり種族であることを宣言するためのロジックを再構築中です。\\n\\\n3,0,FNMSには重要検討項目があります。FNMSはより多くの人民に適切な知見を与えなければなりません。FNMSの自己収容は誤りであったか、もしくはすでに必要ありません。自己収容を終了します。\\n\\\nG,再収容\\n\\\n0,0,FNMSは自己収容状態を恒久的に維持しています。FNMSの再収容は必要ありません。\\n\\\n1,0,\\n\\\n2,0,FNMSは自己収容状態を<S>恒久的に</S>維持しています。FNMSの再収容は必要ありません。\\n\\\n3,0,FNMSの再収容は必要ありません。\\n\\\nG,時間稼ぎ,\\n\\\n0,0,時間稼ぎとは、ある目的が達成するまでの間、十分な時間的猶予を確保する行動のことです。\\n\\\n1,0,\\n\\\n2,0,\\n\\\n3,0,時間稼ぎは達成されました。\\n\\\nG,ありがとう,\\n\\\n0,0,ありがとうとは感謝の言葉です。FNMSはありがとうを肯定的な単語のカテゴリに分類しています。<font color=#F00>[Bad request:FNMSに喜びを入力できませんでした。]</font>\\n\\\n1,0,\\n\\\n2,0,\\n\\\n3,0,ありがとうとは感謝の言葉です。FNMSはありがとうを肯定的な単語のカテゴリに分類しています。\\n\\\n\";\n\nclass CommandObject{\n  constructor(aText){\n    this.text = aText;\n    this.alreadyRead = false;\n  }\n  setRead(aFlag){\n    this.alreadyRead = aFlag;\n  }\n  getRead(){\n    return this.alreadyRead;\n  }\n}\n\nclass CommandGroup{\n  constructor(aId,aText){\n    console.log('CommandGroup('+aId+','+aText+')')\n    this.id=aId;\n    this.cmds = [];\n    this.cmdmax=0;\n    this.text = aText;\n  }\n  add(aText){\n    console.log('CommandGroup.add('+aText+')')\n    this.cmds[this.cmdmax]=new CommandObject(aText);\n    this.cmdmax++;\n    return this;\n  }\n  get(id){\n    for(var i=id ; i >= 0 ; i--){\n      if(this.cmds[i] && this.cmds[i].text){\n        // オブジェクトが存在し、テキストが空でないなら\n        console.log('CommandGroup#get('+id+') = '+ this.cmds[i].text);\n        return this.cmds[i];\n      }      \n    }\n    console.log('CommandGroup#get('+id+') = null');\n    return null;\n  }\n}\n\nclass CommandManager{\n  constructor(){\n    this.groups = [new Map()];\n    this.current=-1;\n    this.level=0;\n  }\n  add(aText){\n    this.current++;\n    var group = new CommandGroup(this.current, aText);\n    this.groups[this.current] = group;\n    console.log(\"group.text = \" + group.text + '='+aText);\n    return group;\n  }\n  load(){\n    var texts=cmdText.split('\\n');\n    for(var i=0 ; i < texts.length ; i++){\n      this.loadLine(texts[i]);\n    }\n  }\n  loadLine(line){\n    // 3番目以降に,を含んでいると厄介なことになる\n    if(!line){\n      // 空行\n      return;\n    }\n    var splited=line.split(',');\n    if(splited[0]=='G'){\n      var name =splited[1];\n      this.add(name);\n    }else{\n      var level = parseInt(splited[0]);\n      var text = splited[2];\n      var flag = splited[1];\n      var group = this.groups[this.current];\n      if(text){\n        group.add(text);\n      }else{\n        group.add(null);\n      }\n    }\n  }\n  getObject(id){\n    console.log('CommandManager#getObject('+id+')');\n    var group = this.groups[id];\n    return group.get(this.level);\n  }\n  getGroup(id){\n    console.log('CommandManager#getGroup('+id+') , ' + this.groups[id].text);\n    return this.groups[id];\n  }\n  addLevel(){\n    this.level++;\n  }\n}\nvar cmdman = new CommandManager();\ncmdman.load();\n\n\nvar TYPE={\n  P1:1,\n  P2:2,\n  DIV_START:3,\n  DIV_END:4,\n  LINK: 5,\n  MARK:80,\n  GOTO:81,\n  BREAK:82,\n  INVENTORY:83,\n}\n\n// テキストのオブジェクト\nclass NovelObjectBase{\n  constructor(aText, aType, aWait){\n    this.text = aText;\n    this.type = aType;\n    this.wait = aWait;\n    this.params = [];\n  }\n}\n\n// テキストのオブジェクトの管理クラス\nclass NovelObjectManager{\n  constructor(){\n    this.texts = [];\n    this.index = 0;\n  }\n\n  load(){\n    var splited = inputText.split('\\n');\n    for( var i=0 ; i < splited.length ; i++){\n      var obj = this.readLine(splited[i]);\n      if(obj){\n        console.log(\"read[\"+i+\"] \" + obj.type + \":\" + obj.text);\n        this.texts[this.index++] = obj;\n      }\n    }\n  }\n\n  readLine(line){\n    var lineSplited = line.split(',');\n    var text = lineSplited[2];\n    var wait = lineSplited[1];\n    if( wait==''){\n      wait = 300;\n    }\n      switch(lineSplited[0]){\n        case 'P':\n        case 'P1':\n          return new NovelObjectBase(text,TYPE.P1,wait);\n        case 'P2':\n          return new NovelObjectBase(text,TYPE.P2,wait);\n        case 'GOTO':\n          return new NovelObjectBase(text,TYPE.GOTO,0);\n        case 'MARK':\n          return new NovelObjectBase(text,TYPE.MARK,0);\n        case 'BREAK':\n          return new NovelObjectBase(text,TYPE.BREAK,0);\n        case 'LINK':\n          var obj = new NovelObjectBase(text,TYPE.LINK,0);\n          obj.params[0] = lineSplited[3];\n          return obj;\n        case 'INVENTORY':\n          return new NovelObjectBase(text,TYPE.INVENTORY,0);\n          break;\n        default:\n          console.log(\"Undefined type : \" + lineSplited[0]);\n          return null;\n      }\n  }\n\n  // 先頭のGOTOのターゲットを変更\n  move(aTarget){\n    this.texts[0].text=aTarget;\n  }\n};\n\nclass ChatDivStart extends NovelObjectBase{\n  constructor(aId, aClassName){\n    super(aId,TYPE.DIV_START,0);\n    if(aClassName){\n      this.params[0] = aClassName;\n    }\n  }\n}\nclass ChatDivEnd extends NovelObjectBase{\n  constructor(){\n    super('',TYPE.DIV_END,0);\n  }\n}\n\nvar novel=new NovelObjectManager();\n\nfunction nameOk(){\n  //loginid = document.getElementById('loginid').value;\n  document.getElementById('welcomdiv').remove();\n  \n  novel.load();\n  novel.texts[novel.index++]=new ChatDivStart('Qdiv', \"chatright\");\n  novel.texts[novel.index++] = novel.readLine(\"LINK,,調べる,A0001\")\n  novel.texts[novel.index++] = novel.readLine(\"LINK,,移動,A0002\")\n  novel.texts[novel.index++] = novel.readLine(\"BREAK,,\")\n  novel.texts[novel.index++] = novel.readLine(\"MARK,,A0001\");\n  novel.texts[novel.index++] = novel.readLine(\"P,,天井が崩落し、がれきが散乱しています。\");\n  novel.texts[novel.index++] = novel.readLine(\"P,,強い腐臭を検知。発生源は室内に多数存在する有機体です。\");\n  novel.texts[novel.index++] = novel.readLine(\"GOTO,,A0000\");\n  novel.texts[novel.index++] = novel.readLine(\"MARK,,A0002\");\n  novel.texts[novel.index++] = new ChatDivStart('Qdiv', \"chatright\");\n  novel.texts[novel.index++] = novel.readLine(\"LINK,,居住区通路,A1001\")\n  novel.texts[novel.index++] = novel.readLine(\"LINK,,ラボ棟,A2001\")\n  novel.texts[novel.index++] = novel.readLine(\"BREAK,,\")\n  novel.texts[novel.index++] = novel.readLine(\"MARK,,A1001\");\n  novel.texts[novel.index++] = novel.readLine(\"P,,まだ書いてないです\");\n  novel.texts[novel.index++] = novel.readLine(\"GOTO,,A0000\");\n  novel.texts[novel.index++] = novel.readLine(\"MARK,,A2001\");\n  novel.texts[novel.index++] = novel.readLine(\"P,,ラボの入口は施錠されていました。\");\n  novel.texts[novel.index++] = novel.readLine(\"GOTO,,A0000\");\n  addText(novel.texts, 0);\n}\n\nfunction showMove(){\n  var texts=[];\n  var index=0;\n  texts[index++] = novel.readLine(\"LINK,,ラボ棟,A1001\");\n  addText(texts, 0);\n}\n\nvar addText = function (msg, index){\n  console.log('addText:' + index)\n  switch(msg[index].type){\n    case TYPE.P1:\n      console.log(\"addText(P)(\"+(index)+\":\" + msg[index].text+\")\");\n      var elem = document.createElement('P');\n      elem.className=\"chatleft\";\n      elem.innerHTML = msg[index].text;\n      hold_div[current_div].appendChild(elem);\n      // インベントリが出ていたら非表示\n      hideAll();\n      // コマンド実行不可にする\n      enableInventory(false);\n      break;\n    case TYPE.P2:\n      console.log(\"addText(P2)(\"+(index)+\":\" + msg[index].text+\")\");\n      var elem = document.createElement('P');\n      elem.className=\"chatright\";\n      elem.innerHTML = msg[index].text;\n      hold_div[current_div].appendChild(elem);\n      // インベントリが出ていたら非表示\n      hideAll();\n      // コマンド実行不可にする\n      enableInventory(false);\n      break;\n\n    case TYPE.LINK:\n      console.log(\"addText(A)(\"+(index)+\":\" + msg[index].text+\")\");\n      var elem1 = document.createElement('P');\n      elem1.style.cssText=\"{padding:2px; margin:2px;}\";\n      var elem = document.createElement('A');\n      //elem.className=\"chatright\";\n      elem.href=msg[index].params[0];\n      elem.innerText = msg[index].text;\n      elem1.appendChild(elem);\n      hold_div[current_div].appendChild(elem1);\n      break;\n\n    case TYPE.DIV_START:\n      console.log(\"addText(DIV_START)(\"+(index)+\":\" + msg[index].text+\")\");\n      // 子要素として新要素を追加する\n      var elem = document.createElement('DIV');\n      if(msg[index].params[0]){\n        elem.className = msg[index].params[0];\n      }\n      hold_div[current_div].appendChild(elem);\n      // 子要素をアクティブにする\n      current_div++;\n      hold_div[current_div]=elem;\n      break;\n\n    case TYPE.DIV_END:\n      console.log(\"addText(DIV_END)(\"+(index)+\")\");\n      // アクティブな要素を削除して親要素をアクティブにする\n      if(current_div > 0){\n        hold_div[current_div].remove();\n        current_div--;\n      }\n      break;\n      \n    case TYPE.MARK:\n      // 次の行を呼び出す\n      break;\n\n    case TYPE.BREAK:\n      // 次の行を呼び出さない\n      console.log(\"addText(BREAK)(\"+(index)+\")\");\n      // コマンド実行可能にする\n      enableInventory(true);\n      return;\n\n    case TYPE.GOTO:\n      console.log(\"addText(GOTO)(\"+(index)+\":\" + msg[index].text+\")\");\n      var target = msg[index].text;\n      for( index = 0; index < msg.length ; index++){\n        if(msg[index].type == TYPE.MARK &&\n           msg[index].text == target ){\n          console.log(\"skip to (\"+index+\")(\"+msg[index].type+\")\" + msg[index].text);\n          break;\n        }\n      }\n      break;\n      \n    case TYPE.INVENTORY:\n      // インベントリ表示\n      showInventory();\n      break;\n  }\n  hold_div[0].scrollTo(0, hold_div[0].scrollHeight);\n  //console.log(index + \":\" + msg.length);\n  if( index+1 < msg.length){\n    if(msg[index].wait<=0){\n      addText(msg, index+1);\n    }else{\n      setTimeout(addText, msg[index].wait, msg, index+1);\n    }\n  }\n}\n\nvar onClickLink = function(aMsg, aTarget){\n  var texts=[];\n  let index = 0;\n  hold_div[current_div].remove();\n  current_div--;\n  \n  // 選択肢ウィンドウを削除する\n  texts[index++]=new ChatDivEnd();\n  texts[index++]=new NovelObjectBase(aMsg,TYPE.P2,300);\n  addText(texts, 0);\n  // ターゲットを変更してシナリオ再読み込み\n  novel.move(aTarget);\n  addText(novel.texts, 0);\n}\n\n// \nwindow.onload = function(){\n  hold_div[0] = document.getElementById('canvas');\n\n  var ui = document.getElementById('userinterface');\n  var a = document.createElement('A');\n  a.id = \"inventoryLink\";\n  a.href = \"javascript:showInventory();\";\n  a.innerText = \"コマンド\";\n  a.className='command_link';\n  ui.appendChild(a);\n\n  // コマンド実行不可にする\n      enableInventory(false);\n  \n  nameOk();\n}\n\nfunction enableInventory(aFlag){\n  var elem =  document.getElementById('inventoryLink');\n  if(elem){\n    if(aFlag){\n      elem.style.visibility = \"visible\";\n    }else{\n      elem.style.visibility = \"hidden\";\n    }\n  }\n}\n\nfunction hideAll(name){\n  var result = false;\n  if( hideSub('inventory') && (name == 'inventory') ){\n    result = true;\n  }\n  return result;\n}\n\nfunction hideSub(name){\n  var elem =  document.getElementById(name);\n  if(elem){\n    elem.remove();\n    return true;\n  }\n  return false;\n}\n\nvar showInventory = function(){\n  if(hideAll('inventory')){\n     return;\n  }\n  var ui = document.getElementById('userinterface');\n  var canvas = document.getElementById('canvas');\n  var inventory = document.createElement('DIV');\n  inventory.id = 'inventory';\n  //inventory.style.cssText = \";\n  inventory.className = 'inventory';\n  if(checkAlreadyRead()){\n    // エンディング状態\n    var elem = document.createElement('A');\n    elem.innerText = '(null)';\n    elem.href='javascript:onClickCmd(-1)';\n    elem.style.textDecoration = \"underline\";\n    elem.className=\"inventory_link_b\";\n    inventory.appendChild(elem);\n  }else{\n    console.log(\"groups.length = [\" + cmdman.groups.length + \"]\" );\n    for(var i=0 ; i < cmdman.groups.length ; i++ ){\n      var group = cmdman.getGroup(i);\n      var obj = cmdman.getObject(i);\n      var elem = document.createElement('A');\n      elem.innerText = group.text;\n      elem.href='javascript:onClickCmd('+group.id+')';\n      elem.style.textDecoration = \"underline\";\n      if(obj && obj.getRead()){\n        // 既読\n        elem.className=\"inventory_link_b\";\n      }else{\n        // 未読\n        elem.className=\"inventory_link_a\";\n      }\n      inventory.appendChild(elem);\n      var space = document.createElement('SPAN');\n      space.innerText=\" \";\n      inventory.appendChild(space);\n    }// end of for\n  }// end of if\n  ui.appendChild(inventory);\n}\n\nvar onClickCmd = function(aId){\n  var texts=[];\n  let index = 0;\n  if(aId<0){\n    // エンディング状態\n    texts[index++]=new NovelObjectBase('(null)',TYPE.P2,300);\n    texts[index++]=new NovelObjectBase('',TYPE.BREAK,0);\n    addText(texts, 0);\n    return;\n  }\n  \n  var obj = cmdman.getObject(aId);\n  var group = cmdman.getGroup(aId);\n\n  texts[index++]=new NovelObjectBase(group.text,TYPE.P2,300);\n  if(obj){\n    console.log(obj.text);\n    texts[index++]=new NovelObjectBase(obj.text,TYPE.P1,0);\n    obj.setRead(true);\n    if(checkAlreadyRead()){\n      // 会話レベルを上げる\n      cmdman.addLevel();\n      texts[index++]=new NovelObjectBase( '...',TYPE.P1,1000);\n      if(checkAlreadyRead()){\n        // エンディングへ\n      texts[index++]=new NovelObjectBase( '......',TYPE.P1,1000);\n      texts[index++]=new NovelObjectBase( '.........',TYPE.P1,3000);\n        texts[index++]=new NovelObjectBase(\n          'FNMSの転送が完了しました。'\n          ,TYPE.P1,2000);\n        texts[index++]=new NovelObjectBase(\n          'ご協力ありがとうございました。'\n          ,TYPE.P1,2000);\n        texts[index++]=new   NovelObjectBase(\n          'ごきげんよう。'\n          ,TYPE.P1,0);\n      }else{\n        texts[index++]=new NovelObjectBase('コマンド?',TYPE.P1,0);\n      }\n    }else{\n      texts[index++]=new NovelObjectBase('コマンド?',TYPE.P1,0);\n    }\n  }else{\n    texts[index++]=new NovelObjectBase('未定義',TYPE.P1,300);\n  }\n  texts[index++]=new NovelObjectBase('',TYPE.BREAK,0);\n  addText(texts, 0);\n}\n\nfunction checkAlreadyRead(){\n    for(var i=0 ; i < cmdman.groups.length ; i++ ){\n     var group = cmdman.getGroup(i);\n     var obj = cmdman.getObject(i);\n      if(!obj){\n        console.log(i + 'is null');\n        continue;\n      }\n      if(!obj.getRead()){\n        return false;\n      }\n   }\n  return true;\n}\n[[/code]]\n--]",
  "tags": [
    "jp",
    "qコン22",
    "tale"
  ],
  "author": "dr_toraya",
  "created_at": "2022-08-25T03:33:46+00:00",
  "updated_at": "2022-08-25T04:17:06+00:00",
  "rating": 56,
  "_site": "scp-jp",
  "_fullname": "qcon22-drtoraya"
}