{
  "title": "Papers, Pages and Post-it Notes",
  "content": "[[iftags +コンポーネント]]\n\n[[include :scp-jp:credit:start-preview]]\n**タイトル:** Papers, Pages and Post-it Notes\n**翻訳責任者:** [[*user nebula2700]]\n**翻訳年:** 2024\n**原題:** Papers, Pages and Post-it Notes\n**著作権者:** [[*user Croquembouche]]\n**作成年:** 2020\n**初訳時参照リビジョン:** 16\n**元記事リンク:** [https://scp-wiki.wikidot.com/component:pages ソース]\n[[include :scp-jp:credit:end-preview]]\n\n[[include :scp-wiki:component:croqstyle -=- ]]\n\n[[module CSS]]\ntd { vertical-align: top; }\ntd strong { white-space: nowrap; }\n.options table.wiki-content-table td { border: none; padding: 0.7em 1em; }\n.previews { word-break: none; }\n.previews img, .previews span.img { max-width: 10rem; max-height: 10rem; }\n[[/module]]\n\n[[div style=\"border: 1px solid #ddd; padding: 1em;\"]]\n+ これは何？\n\nテキストを別々のページのように表示するコンポーネント。例えば本のページのように。\n\n[[*user Croquembouche]]によって作成。\n\nページ分割を再現するその他のコンポーネント:\n\n* [[[component:hf-book-left | ハーマン・フラーの本　左]]]\n* [[[component:hf-book-right | ハーマン・フラーの本　右]]]\n* [[[component:hf-book-right-start | Herman Fuller Book Page Right (Chapter Start)]]]\n* [[[component:hf-start | Herman Fuller GOI: Chapter Start]]]\n* [[[component:hf-left | Herman Fuller GOI: Left Page v2]]]\n* [[[component:hf-right | Herman Fuller GOI: Right Page v2]]]\n\n+ 使い方\n\nどんなウィキでも:\n\n[[div class=\"code terminal\"]]\n**##var(--c-keyword)|[[include##** ##var(--c-symbol)|:scp-jp:component:pages##\n**##var(--c-keyword)||##** **##var(--c-builtin)|medium##****##var(--c-keyword)|=##**##var(--c-symbol)|vintage-book##\n**##var(--c-keyword)||##** **##var(--c-builtin)|contents##****##var(--c-keyword)|=##**\n##var(--c-string)|<h1>こんにちは、私の本へようこそ。</h1>\n執筆にかかった苦労が報われるよう、<em>心から楽しんで</em>もらえればと思います##\n**##var(--c-keyword)|]]##**\n[[/div]]\n\nこのコンポーネントには2つのパラメータがあります。\n\n[[div class=\"options\"]]\n|| **medium** || どのような媒体でテキストを表示するかを指定します。これによって、各ページの背景画像やフォントなどが決まります。オプションの追加は大歓迎です。 -- アイデアをお持ちの方は私（[[user Croquembouche]]）までご連絡ください。 _\nこれらについての詳細はページ最下部にあります。 ||\n|| **contents** || 非常にシンプルな書式や画像なら含めることができます。 ||\n|| **style** || ドキュメントに適用されるCSSスタイル ||\n[[/div]]\n\ncontentsパラメータはいくらでも改行できます。\n\ncontentsに以下の文字は使用できません:\n\n* {{|}}（パイプ記号）\n* {{@@`@@}}（バッククォート）ただし、直前にバックスラッシュ[[footnote]] 訳注: 表示環境によっては {{¥}}（円記号）で表示される [[/footnote]]がある場合は問題ありません（{{\\`}}）\n* {{]]}}（2つの閉じ角括弧）ただし、行末または空白が続く場合に限ります\n\n[[/div]]\n\n _\n\n[[div style=\"border: 1px solid #ddd; padding: 1em;\"]]\n\n+ テキストフォーマット\n\ncontentsパラメータはWikidotではレンダリング[[footnote]] 訳注: 特定のデータを視覚的な形式（テキストなど）で表示するプロセス。 [[/footnote]]されません。私が自分で書いたカスタムパーサー[[footnote]] 訳注: 特定のデータ形式を解析するため、独自に実装されるプログラムや関数。 [[/footnote]]に直接渡され、HTMLとして出力されます。\n\n慣れ親しんだ素敵なWikidot構文はすべて窓から吹き飛んでしまいます。その代わりに、インラインHTMLを記述しなければなりません。\n\n例:\n\n* 太字にするには、{{@@**テキスト**@@}}の代わりに{{<b>テキスト</b>}}と記述します。\n* エムダッシュを作成するには{{@@--@@}}の代わりに文字通りのエムダッシュ（{{—}}）を記述します。\n* 罫線を作るには@@-----@@の代わりに{{<hr>}}と記述します。\n\n通常のHTMLとは違い、各行を{{<p>...</p>}}で囲む必要は**ありません**。\n\n-----\n\n+ 画像\n\n画像の標準的なHTMLを使用して、画像を組み込みます:\n\n[[div class=\"code terminal\"]]\n##var(--c-string)|<img src=\"@@https://scp-jp-storage.wdfiles.com/local--files/ページ名/ファイル名@@\">##\n[[/div]]\n\n{{position=\"top\"}}または{{position=\"bottom\"}}を追加することで画像を上部または下部に固定することができます。これにより、画像は表示されるページの上部または下部に固定されます。ただし、これはテキストの途中ではなく、単独で行にある画像にのみ適用されます:\n\n[[div class=\"code terminal\"]]\n##var(--c-string)|<img position=\"top\" src=\"URL\">##\n[[/div]]\n\n画像を水平方向に中央寄せするには、このCSSを{{style}}属性に直接追加してください:\n\n[[div class=\"code terminal\"]]\n##var(--c-string)|<img style=\"####var(--c-builtin)|display##: ##var(--c-value)|block##; ##var(--c-builtin)|margin-left##: ##var(--c-value)|auto##; ##var(--c-builtin)|margin-right##: ##var(--c-value)|auto##;##var(--c-string)|\" src=\"URL\">##\n[[/div]]\n\n画像が高すぎて1ページに収まらない場合、その下は切り落とされます。\n\n-----\n\n+ 改ページ\n\nあなたは時々こう言いたくなるでしょう「そこまででいいぞ。次の部分は新しいページから始めるんだ。このページの残りは空白で構わないさ。」\n\nそんな時は、単独の行に改ページを追加しましょう:\n\n[[div class=\"code terminal\"]]\n##var(--c-string)|<br class=\"page-break\">##\n[[/div]]\n\n改ページの次に来るものは、次のページになります。改ページの//直前//に{{position=\"bottom\"}}の画像がある場合、その画像は期待通り前のページの下部に表示されます。\n\n-----\n\n+ 高度な使用法\n\nCSSはstyleパラメータを介して組み込むことができ、Javascriptはcontentsパラメータに埋め込むことができます。\n\n++ CSSを使う\n\nstyleパラメータに記述したCSSは全てページに適用されます。これを使用することで、微調整をしたり、内容部分で使えるクラスを追加したり、フォントを変更（例）したりできます。\n\n例:\n\n[[div class=\"code terminal\"]]\n**##var(--c-keyword)|[[include##** ##var(--c-symbol)|:scp-jp:component:pages##\n**##var(--c-keyword)||##** **##var(--c-builtin)|medium##****##var(--c-keyword)|=##**##var(--c-symbol)|vintage-book##\n**##var(--c-keyword)||##** **##var(--c-builtin)|style##****##var(--c-keyword)|=##**\n##var(--c-operator)|@import## ##var(--c-builtin)|url##(##var(--c-string)|'@@https://fonts.googleapis.com/css2?family=Hachi+Maru+Pop&display=swap@@'##);\n\n##var(--c-keyword)|.####var(--c-symbol)|page## {\n@@  @@##var(--c-builtin)|font-family##: ##var(--c-string)|\"Hachi Maru Pop\"##, ##var(--c-value)|cursive##;\n@@  @@##var(--c-builtin)|margin##: ##var(--c-value)|2rem##;\n}\n\n##var(--c-keyword)|.####var(--c-symbol)|page## ##var(--c-keyword)|.####var(--c-symbol)|red## {\n@@  @@##var(--c-builtin)|color##: ##var(--c-value)|red##;\n}\n**##var(--c-keyword)||##** **##var(--c-builtin)|contents##****##var(--c-keyword)|=##**\n##var(--c-string)|このテキストは<span class=\"red\">手書き</span>で表示されます。##\n**##var(--c-keyword)|]]##**\n[[/div]]\n\n記事の他の場所にあるCSSモジュールでこのコンポーネントのスタイルを変更することはできません。 -- これが唯一の方法です。\n\n**ヒント！** パラメータは好きな順番で追加できますが、styleパラメータをcontentsパラメータ//よりも上//に置くのが良いでしょう。おそらくcontentsパラメータは非常に長くなります -- そのため、設定やCSSをすべて上部にまとめておく方が扱いやすくなるかもしれません。\n\n++ Javascriptを使う\n\ncontentsパラメータはJavascriptの[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Template_literals テンプレートリテラル]として解析されます。これがバッククォートを使用できない理由です。\n\nそのため、contentsパラメータ内で埋め込み式（{{${expression}}}）を使用して任意のJavaScriptを組み込むことができ、それが実行されたものが文字列に代入されます。例:\n\n[[div class=\"code terminal\"]]\n**##var(--c-keyword)|[[include##** ##var(--c-symbol)|:scp-jp:component:pages##\n**##var(--c-keyword)||##** **##var(--c-builtin)|medium##****##var(--c-keyword)|=##**##var(--c-symbol)|vintage-book##\n**##var(--c-keyword)||##** **##var(--c-builtin)|contents##****##var(--c-keyword)|=##**\n##var(--c-string)|今日の曜日は####var(--c-operator)|${####var(--c-keyword)|new## ##var(--c-builtin)|Date##().##var(--c-builtin)|toLocaleString##(##var(--c-string)|\"default\"##, { ##var(--c-symbol)|weekday##: ##var(--c-string)|\"long\"## })##var(--c-operator)|}####var(--c-string)|です。##\n**##var(--c-keyword)|]]##**\n[[/div]]\n\nこの本は読者に今日が何曜日か教えてくれます。\n\nこんなことをする必要はありますか？いいえ、ありません。ただ//できる//というだけです。\n\n任意のJavaScriptを含めることはできますが、OR演算子（{{||}}）はパイプ記号で構成されているため使用できないことに注意してください。しかし、ANDとNOTを使用することで[https://stackoverflow.com/questions/8374895/how-to-make-logical-or-with-and-and-not ORを再現]できます: NOT((NOT x) AND (NOT y))は(x OR y)と等価です。Javascriptでは、これは{{!((!x) && (!y))}}となります。\n\n[[/div]]\n\n  _\n\n[[div style=\"border: 1px solid #ddd; padding: 1em;\"]]\n\n+ 媒体のオプション\n\n'{{medium}}'パラメータのオプションは以下のとおりです。\n\n私は新しい媒体のオプションのリクエストを積極的に募集しています。言い換えれば、このコンポーネントのタイトルは//『Papers, Pages and Post-it Notes』//であり、できる限り多用途に設計されていますが、現時点ではいくつかの機能しか実行できないということです。\n\nページ分割のフォーマットに関するリクエストがありましたら、私にお知らせください（[[user Croquembouche]]）。\n\n各媒体はブラウザの幅に影響されない固定アスペクト比を持っています。\n\n[[div class=\"previews\"]]\n||~ 媒体 ||~ 背景||~ フォント||~ y:x ||~ ソース||\n|| {{plain}} //(デフォルト)// || [[image https://scp-jp-storage.wdfiles.com/local--files/file%3A8260379-81-iyfd/plain-preview.png]] || //ブラウザのデフォルト// || 4:7 || ||\n|| {{vintage-book}} || [[image https://scp-jp-storage.wdfiles.com/local--files/file%3A8260379-82-wlsb/book.300px.png]] || Noto Serif Japanese[[footnote]] 訳注: 原語版ではLibre Baskerville。 [[/footnote]] || 10:9 || [https://commons.wikimedia.org/wiki/File:Powiedz_ty_muzyko_moia.jpg?uselang=ja パブリックドメイン] ||\n|| {{gdocs}} || [[span class=\"img\" style=\"display: block; height: 100%; aspect-ratio: 0.7; border: thin solid grey; background: white;\"]]@@ @@[[/span]] || サンセリフ || sqrt(2)[[footnote]] 訳注: ルート2（{{√２}}）を意味する。 [[/footnote]]:1 || ||\n[[/div]]\n\n[[/div]]\n\n _\n\n[[div style=\"border: 1px solid #ddd; padding: 1em;\"]]\n\n+ ソースコード\n\n[[collapsible show=\"+ ソースコードを表示\"]]\n\n++ HTML\n\nページソースの最下部にある{{@@[[html]]@@}}モジュールを確認してください。\n\n++ CSS\n\n[[code type=\"css\"]]\n/* Imports */\n/* Note that fonts MUST be imported synchronously using the link element,\n * otherwise the page structure may not render properly */\n\n/* Styling */\n\n.pages-container {\n  font-size: min(4vw, 1rem);\n  position: relative;\n}\n\n/* A page without a medium needs some default styling. */\n.aspect-ratio {\n  margin: 1rem 0;\n  /* The padding-top should be the ratio of the bg image's width / height */\n  padding-top: calc(400 / 700 * 100%);\n  position: relative;\n}\n.page {\n  height: 0;\n  padding: 2rem 2rem 3rem;\n  position: absolute;\n  height: 100%; width: 100%; top: 0; left: 0;\n  box-sizing: border-box;\n}\n.page::before {\n  content: \"\";\n  position: absolute;\n  height: 100%; width: 100%; top: 0; left: 0;\n  pointer-events: none;\n  background-image: linear-gradient(beige, antiquewhite);\n  background-size: 100% 100%;\n  background-repeat: no-repeat;\n  z-index: -1;\n  box-sizing: border-box;\n}\n\n.content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n.content > * {\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n}\n\np, img, div { max-width: 100%; }\nh1, h2, h3, h4, h5, h6 { line-height: 1em; }\n  \n\n/* Each medium gets its own style. */\n\n/* Vintage book */\n\n.vintage-book {\n  font-family: 'Libre Baskerville', serif;\n  color: #514132;\n  line-height: 1.5em;\n  text-align: justify;\n}\n.vintage-book .aspect-ratio {\n  padding-top: calc(2500 / 2250 * 100%);\n}\n.vintage-book .page {\n  padding: 8vw 17vw;\n}\n.vintage-book .page::before {\n  background-image:\n    url(https://scp-jp-storage.wikidot.com/local--files/file%3A8260379-83-tgv9/book.1000px.webp);\n}\n.vintage-book > :nth-child(2n+1) .page::before {\n  transform: scaleX(-1);\n}\n.vintage-book .content {\n  transform: skewY(-0.5deg);\n}\n.vintage-book > :nth-child(2n+1) .content {\n  transform: skewY(0.5deg);\n}\n.vintage-book .split-paragraph-start {\n  text-align-last: justify;\n}\n.vintage-book .content > p:not(.split-paragraph-end):not(.is-image) {\n  text-indent: 2em;\n}\n\n/* Gdocs */\n\n.gdocs {\n  font-family: sans-serif;\n  color: #15141A;\n  line-height: 1.25em;\n}\n.gdocs .aspect-ratio {\n  padding-top: calc(1.414 / 1 * 100%);\n}\n.gdocs .page {\n  padding: 10vw 10vw;\n}\n.gdocs .page::before {\n  background: white;\n  border: thin solid grey;\n}\n[[/code]]\n\n++ Javascript\n\n[[code type=\"javascript\"]]\nlet pageCount = 1\nlet resetCount = 0\n\n// contents is already defined, see [[html]]\n\n// Replace line breaks with <p>\ncontents = contents\n  .split(\"\\n\")\n  .filter(line => line.length > 0)\n  .map(line => {\n    return $(`<p>${line}<${\"/p\"}>`) // to fix Wikidot's syntax highlighting\n  })\n\n// Convert contents from text to jQuery objects\ncontents = $($.map(contents, el => el.get()))\n\n// Remove empty objects\ncontents = contents.filter(\":not(:empty)\")\n\n// Add flex order to paragraphs containing positioned images\ncontents.map((index, element) => {\n  element = $(element)\n  if (\n    element.is(\"p\") &&\n    element.text().length === 0 &&\n    element.children().length === 1 &&\n    element.children().first().is(\"img\")\n  ) {\n    // Mark images\n    element.addClass(\"is-image\")\n    if (\n      [\"top\", \"bottom\"].includes(element.children().first().attr(\"position\"))\n    ) {\n      // Order positioned images\n      element.css(\n        \"order\",\n        { top: -1, bottom: 1 }[element.children().first().attr(\"position\")]\n      )\n    }\n  }\n})\n\n// Once everything is ready, render the pages\n// This includes image loading, so this is window load instead of document ready\n$(window).on(\"load\", () => {\n  resetCount = 0\n  let thisDocument = $(\".pages-container\")\n  resetPage(thisDocument)\n  // Sometimes doesn't work after first load - try again\n  setTimeout(() => resetPage(thisDocument), 2000)\n\n  let windowWidth = $(window).width()\n\n  // Rerender the pages when the window size is changed\n  $(window).on(\n    \"resize\",\n    debounce(() => {\n      if ($(window).width() !== windowWidth) {\n        windowWidth = $(window).width()\n        resetPage(thisDocument)\n      }\n    }, 200)\n  )\n})\n\n/**\n * Debounces the execution of a function - it will only fire once its\n * triggering events have stopped.\n *\n * By David Walsh: https://davidwalsh.name/javascript-debounce-function (MIT)\n *\n * @param func - The function to debounce.\n * @param wait - Milliseconds after which to assume there'll be no more events.\n */\nfunction debounce(func, wait) {\n  let timeout\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout)\n      func(...args)\n    }\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n  }\n}\n\nfunction resetPage(thisDocument) {\n  thisDocument.empty()\n  pageCount = 1\n  thisPage = preparePage(thisDocument)\n  setTimeout(() => {\n    makePage(contents.clone(), thisPage, thisDocument)\n    checkPage(thisDocument)\n  }, 1)\n}\n\nfunction preparePage(thisDocument) {\n  const aspectBox = $(`<div class='aspect-ratio'></div>`).appendTo(thisDocument)\n  return $(`<div class='page'></div>`).appendTo(aspectBox)\n}\n\n/**\n * Recursively creates pages and sorts text into them.\n *\n * @param contents - Array of (remaining) HTML paragraphs.\n * @param thisPage - The current page as a jQuery element.\n */\nfunction makePage(contents, thisPage, thisDocument) {\n  console.log(`Making page ${pageCount++}`)\n\n  let nextPageContents = []\n\n  // Add the contents to the page\n  thisPageContents = $(\"<div class='content'></div>\").appendTo(thisPage)\n  thisPageContents.empty().append(contents)\n\n  // The page height is the maximum height of page content\n  const pageHeight = thisPage.height()\n\n  // The content height is the actual height of page content\n  const contentHeight = thisPageContents.outerHeight()\n\n  // If the content exceeds the page, create a new one\n  if (\n    contentHeight > pageHeight ||\n    thisPageContents.has(\"br.page-break\").length > 0\n  ) {\n    console.log(`Split needed (${contentHeight} > ${pageHeight})`)\n\n    // Find the first element that can't fully appear on the page\n    // (or a page break)\n    const children = thisPageContents.children()\n    let lastParagraphIndex = -1\n    for (let index = 0; index < children.length; index++) {\n      const child = $(children.eq(index))\n      // First, check for a page break\n      if (child.has(\"br.page-break\").length > 0) {\n        console.log(\"Splitting on page break\")\n        lastParagraphIndex = index\n        break\n      }\n      // Second, check for an element that doesn't fit\n      // Do this by summing the height of all children up to and this one,\n      // then compare that to the desired page height\n      const childBottom =\n        children\n          .slice(0, index)\n          .toArray()\n          .reduce((height, child) => {\n            return height + $(child).outerHeight(true)\n          }, 0) + child.outerHeight(true)\n      console.log(index, childBottom, thisPage.height())\n      if (childBottom > thisPage.height()) {\n        lastParagraphIndex = index\n        break\n      }\n    }\n\n    if (lastParagraphIndex === -1) {\n      // No elements can fit on this page!\n      // Genuinely unsure what to do here\n      // The default action is \"move everything\" so that's probably... fine...\n      console.log(\"No elements can fit on this page\")\n    } else {\n      // There's an element that either can't be on the page, or partially can\n      console.log(`Splitting element with index ${lastParagraphIndex}`)\n\n      // Trim away the content that we already know will fit\n      nextPageContents = contents.splice(lastParagraphIndex)\n      // The partial element is the first of nextPageContents.\n\n      // Set the html to the contents we know will fit\n      thisPageContents.empty().append(contents)\n\n      // Extract a copy of the partial element from the next page\n      let partialElement = $(nextPageContents[0]).clone()\n\n      // If the partial element is p, it can be split up\n      if (partialElement.is(\"p\") && partialElement.text() != \"\") {\n        // The element can be split across pages - move some of it back\n\n        partialElement.appendTo(thisPageContents)\n\n        const partialText = partialElement.text()\n        let keepWords = partialText.split(\" \")\n        let moveWords = []\n\n        // Remove words one by one until the element fits\n        for (let index = keepWords.length; index > 0; index--) {\n          if (thisPageContents.outerHeight(true) <= thisPage.height()) {\n            // It fits! Declare split\n            console.log(\n              `Split successful after ${moveWords.length} words removed`\n            )\n            if (moveWords.length > 0) {\n              partialElement.addClass(\"split-paragraph-start\")\n            }\n            break\n          }\n          let word = keepWords.pop()\n          moveWords.unshift(word)\n          partialElement.text(keepWords.join(\" \"))\n        }\n\n        // Check if this was successful - might have just run out of words\n        if (keepWords.length === 0) {\n          // Not successful - undo everything\n          console.log(\"Split unsuccessful; partial element removed\")\n          partialElement.remove()\n        } else {\n          // Success! Update the next page with the retained words\n          nextPageContents[0].textContent = moveWords.join(\" \")\n        }\n      } else {\n        // The element can't be split, so don't move anything back\n        // If it's the first element, it probably came from the previous page\n        // If that's the case, jut dump it here\n        if (lastParagraphIndex == 0) {\n          console.log(\"Something couldn't be split, so it was dumped\")\n          partialElement.appendTo(thisPageContents)\n          partialElement.css(\"height\", pageHeight)\n          partialElement.css(\"overflow\", \"hidden\")\n          nextPageContents.shift()\n        }\n      }\n    }\n\n    // If the last element of this page was split, so it the first of the next\n    if (\n      thisPageContents.children().last().is(\"p.split-paragraph-start\") &&\n      $(nextPageContents[0]).is(\"p\")\n    ) {\n      nextPageContents[0].classList.add(\"split-paragraph-end\")\n    }\n\n    // If the very first element of the next page is a page break, chuck it out\n    if ($(nextPageContents[0]).has(\"br.page-break\").length > 0) {\n      console.log(\"Scrapping a page break\")\n      nextPageContents.shift()\n    }\n\n    // Slap an arbitrary limit on the recursion\n    if (pageCount < 1000) {\n      // Create a new page\n      const nextPage = preparePage(thisDocument)\n      makePage(nextPageContents, nextPage, thisDocument)\n    } else {\n      console.log(\"Pages stopped after 1000\")\n    }\n  } else {\n    console.log(\"No split needed\")\n  }\n}\n\nfunction checkPage(thisDocument) {\n  if (resetCount > 5) {\n    console.log(\"Overflow reset limit reached\")\n    return\n  }\n  let shouldReset = 0\n  thisDocument.children().each((index, aspectBox) => {\n    aspectBox = $(aspectBox)\n    pageBox = $(aspectBox.children().first())\n    contentBox = $(pageBox.children().first())\n    if (contentBox.outerHeight(true) > pageBox.height()) {\n      shouldReset++\n    }\n    if (shouldReset > 1) {\n      console.log(`${shouldReset} pages overflowing, resetting`)\n      resetCount++\n      resetPage(thisDocument)\n      checkPage(thisDocument)\n    } else {\n      console.log(\"No overflow reset needed\")\n    }\n  })\n}\n[[/code]]\n\n[[/collapsible]]\n\n[[/div]]\n\n[[/iftags]]\n\n[[html]]\n<base target=\"_top\"></base>\n\n<link href=\"https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@200..900&display=swap\" rel=\"stylesheet\">\n\n<link href=\"https://pseudo-scp-jp.wdfiles.com/local--code/component-pages/1\" rel=\"stylesheet\">\n\n<style>\n  /* The user's CSS should override any existing CSS. */\n  {$style}\n</style>\n\n<body>\n  <div class=\"pages-container {$medium}\"></div>\n</body>\n\n<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n<script>\n  // Recieve book contents from include parameter\n  let contents = `{$contents}`\n</script>\n<script src=\"https://pseudo-scp-jp.wdfiles.com/local--code/component-pages/2\"></script>\n[[/html]]\n\n@@@@\n@@@@\n@@@@\n@@@@\n\n[!--\n[[div class=\"blockquote\"]]\n**出典:** [*https://scp-wiki.wikidot.com/theme:penumbra-bhl Penumbra BHL](rev.29)\n**作成日(EN):** 2021/06/4\n[[/div]]\n\n[[collapsible show=\"+ 画像ライセンス\"]]\n[[div class=\"blockquote\"]]\n\n**ファイルページ:** [*http://scp-jp-storage.wikidot.com/file:8260379-81-iyfd plain-preview.png]\n\n**ファイル名:** plain-preview.png\n\n**ソース:** https://scp-wiki.wikidot.com/component:pages\n**ライセンス:** CC BY-SA 3.0\n**タイトル:** plain-preview.png\n**著作権者:** [[*user Croquembouche]]\n**公開年:** 2020\n\n**補足:**\n\n[[/div]]\n[[div class=\"blockquote\"]]\n\n**ファイルページ:** [*http://scp-jp-storage.wikidot.com/file:8260379-82-wlsb book.300px.png]\n\n**ファイル名:** book.300px.png\n\n**ソース:** https://scp-wiki.wikidot.com/component:pages\n**ライセンス:** CC BY-SA 3.0\n**タイトル:** book.300px.png\n**著作権者:** [[*user Croquembouche]]\n**公開年:** 2020\n\n**補足:**\n[[*user Croquembouche]]氏が以下の画像に加工を施したものと思われる。\n[[div class=\"blockquote\"]]\n**ソース:** https://commons.wikimedia.org/wiki/File:Powiedz_ty_muzyko_moia.jpg\n**ライセンス:** パブリックドメイン/CC0\n**著作権者:** Adam Czahrowski\n[[/div]]\n\n[[/div]]\n[[div class=\"blockquote\"]]\n\n**ファイルページ:** [*http://scp-jp-storage.wikidot.com/file:8260379-83-tgv9 book.1000px.webp]\n\n**ファイル名:** book.1000px.webp\n\n**ソース:** https://scp-wiki.wikidot.com/component:pages\n**ライセンス:** CC BY-SA 3.0\n**タイトル:** book.1000px.webp\n**著作権者:** [[*user Croquembouche]]\n**公開年:** 2020\n\n**補足:**\n[[*user Croquembouche]]氏が以下の画像に加工を施したものと思われる。\n[[div class=\"blockquote\"]]\n**ソース:** https://commons.wikimedia.org/wiki/File:Powiedz_ty_muzyko_moia.jpg\n**ライセンス:** パブリックドメイン/CC0\n**著作権者:** Adam Czahrowski\n[[/div]]\n\n[[/div]]\n[[/collapsible]]\n--]",
  "tags": [
    "en",
    "コンポーネント"
  ],
  "author": "R74",
  "created_at": "2024-11-26T12:35:23+00:00",
  "updated_at": "2024-11-26T12:38:54+00:00",
  "rating": 9,
  "_site": "scp-jp",
  "_fullname": "component:pages"
}