{
  "title": "あるドイツ人考古学者の手記 第3部",
  "content": "[[include component:jstyles]]\n[[include :scp-jp:theme:mujin-getsudo]]\n\n[[include credit:start]]\n**タイトル:** あるドイツ人考古学者の手記～第3部\n**著者:** ©︎[[*user dr_toraya]]\n**作成年:** 2020\n[[include credit:end]]\n\n\n[[div class=\"normalFontTime\"]]\n[[iframe http://scp-jp.wikidot.com/tale-1921-jp-3/code/1 width=\"100%\" height=\"500px\" scrolling=\"no\"]]\n[[/div]]\n\n[[div style=\"text-align:center; color: black; border: solid 1px #000000; background:#444444 url(http://scp-wiki.wdfiles.com/local--files/the-great-hippo/scp_trans.png) center no-repeat; padding:5px; margin-bottom: 10px;\"]]\n**[[[http://scp-jp.wikidot.com/tale-1921-jp/offset/1/page2_limit/1|≪第2部へ戻る]]]**\n[[/div]]\n\n[!--\n[[code type=\"html\"]]\n<html>\n<head>\n<meta charset='utf-8' />\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<script src='http://cdn.rawgit.com/phi-jp/phina.js/v0.2.0/build/phina.min.js'></script>\n<script type=\"text/javascript\">\nphina.globalize();\n \nvar level = 0;\nvar life = 3;\nvar score = 0;\nvar combo = 0;\nvar maxcombo = 0;\nvar maxlevel = 0;\nvar maxscore = 0;\n\nvar button9 = [];\nvar button_ok;\nvar button_pause;\nvar answers = [];\nvar centerlabel;\nvar actionlabel;\nvar actionlabeltimer;\nvar turntimer;\nvar basescene;\nvar answerindex;\nvar b9lavels = [\"Rin\",\"Pyo\",\"Tou\",\"Sha\",\"Kai\",\"Jin\",\"Let\",\"Zai\",\"Zen\"];\nvar BUTTON_MAX=4;\nvar hearts;\nvar ninjaimg;\nvar bgimg;\n\nvar lavelgroup;\nvar spritegroup;\nvar uigroup;\n\nvar levellabel;\nvar scorelabel;\nvar combolabel;\n\nvar READY_TURN=0;\nvar ENEMY_TURN=1;\nvar PLAYER_TURN=2;\nvar SUCCESS_TURN=3;\nvar DEAD_TURN=4;\nvar MISS_TURN=5;\nvar whichturn =READY_TURN;\nvar TITLEJP = 'ある考古学者の手記 第3部';\nvar TITLE = 'Anmerkung des Archäologen';\n\nvar ASSETS = {\n  // 画像\n  image: {\n    'ninja1':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/ninja-153355_640.png',\n    'ninja2':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/ninja-153354_640.png',\n    'ninja3':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/ninja-2288747_1920.png',\n    'ninja4':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/silhouette-3276834_640.png',\n    'ninja5':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/man-2357730_640.png',\n    'ninja6':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/ninja-2007576_1280.jpg',\n    'holygrail':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/holygrail.png',\n\t\t'grow': 'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/glow.png',\n\t\t'bg':'http://scp-jp.wdfiles.com/local--files/tale-1921-jp-3/castle.jpg',\n  },\n};\n\nphina.main(function() {\n  //作成したManagerSceneを使うにはこれが必要\n  var app = GameApp(\n    {\n      assets: ASSETS, // アセット読み込み\n      startLabel:'MainScene',\n      scenes: [\n        {\n          label: 'MainScene',\n          className: 'MainScene',\n          arguments: { assets: ASSETS },\n        },\n        {\n          label: \"SubScene\",\n          className: \"SubScene\",\n        },\n        {\n          label: \"PauseScene\",\n          className: \"PauseScene\",\n        },\n        {\n          label: \"GameOverScene\",\n          className: \"GameOverScene\",\n        },\n      ]\n    }\n  );\n  //document.body.appendChild(app.domElement);\n  //app.replaceScene(MyManagerScene());\n \n  app.run();\n});\n\nphina.define('BaseScene', {\n  superClass: \"phina.display.DisplayScene\",\n \n  init: function() {\n    this.superInit();\n \n    var chkAndroid = navigator.userAgent.indexOf(\"Android\")>0;\n \n    spritegroup = DisplayElement().addChildTo(this);\n    lavelgroup = DisplayElement().addChildTo(this);\n    uigroup = DisplayElement().addChildTo(this);\n \n    centerlabel =Label({\n      fontSize:60,\n      fontWeight:\"bold\",\n      align:\"center\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"white\",\n      stroke:\"black\",\n      strokeWidth:12,\n      }).addChildTo(lavelgroup);\n    centerlabel.x = this.gridX.center();\n    centerlabel.y = this.gridY.center()+50;\n \n    actionlabel = Label({\n      fontSize:40,\n      fontWeight:\"bold\",\n      align:\"right\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"white\",\n      stroke:\"black\",\n      strokeWidth:12,\n      }).addChildTo(lavelgroup);\n    actionlabel.x = this.gridX.center()+300;\n    actionlabel.y = this.gridY.center()+120;\n    actionlabel.text = '';\n    \n    levellabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"blue\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    levellabel.x = 30;\n    levellabel.y = 60;\n\n    scorelabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"blue\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    scorelabel.x = 30;\n    scorelabel.y = 120;\n\n    combolabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"blue\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    combolabel.x = 30;\n    combolabel.y = 180;\n    levellabel.text = 'level:'+level;\n    scorelabel.text = 'score:'+score;\n    combolabel.text = 'combo:'+combo;\n\n    var self = this;\n    for( let i=0 ; i < BUTTON_MAX ; i++ ){\n      button9[i]=Button({\n        width: 90,         // 横サイズ\n        height: 90,        // 縦サイズ\n        fontWeight:\"bold\",\n        fontSize: 32,       // 文字サイズ\n        fontColor: 'white', // 文字色\n        cornerRadius: 10,   // 角丸み\n        fill: 'blue',    // ボタン色\n        stroke: 'black',     // 枠色\n        strokeWidth: 4,     // 枠太さ\n        text: b9lavels[i],     // 表示文字\n      });\n      button9[i].addChildTo(uigroup);\n      if(BUTTON_MAX==9){\n        button9[i].setPosition(220+100*(i%3), 700+100*Math.floor(i/3));\n      }else{\n        var x = 400;\n        switch(i){\n          case 0:\n            button9[i].setPosition(x, 800-100);\n            break;\n          case 1:\n            button9[i].setPosition(x-100, 800);\n            break;\n          case 2:\n            button9[i].setPosition(x+100, 800);\n            break;\n          case 3:\n            button9[i].setPosition(x, 800+100);\n            break;\n        }\n      }\n      button9[i].onpointend = function(){\n        if(whichturn != PLAYER_TURN){\n          return;\n        }\n        if( answers.length > answerindex){\n          // 問題が設定されている場合\n          if(answers[answerindex]==i){\n            // collect\n            combo += 1;\n            score += combo;\n            if(maxscore<score){\n              maxscore = score;\n            }\n            if(maxcombo < combo){\n              maxcombo = combo;\n            }\n            scorelabel.text = \"score:\"+score;\n            combolabel.text = \"combo:\"+combo;\n            if(answerindex>0){\n              ninjaimg[answers[answerindex-1]].alpha=0;\n            }\n            ninjaimg[answers[answerindex]].alpha=1;\n            answerindex++;\n            if(answerindex >= answers.length){\n              // stage clear\n              centerlabel.text = 'Success!';\n              whichturn=SUCCESS_TURN;\n              turntimer=1000;\n            }\n          }else{\n            combo = 0;\n            combolabel.text = \"combo:\"+combo;\n            if(answerindex>0){\n              ninjaimg[answers[answerindex-1]].alpha=0;\n            }\n            if(life > 0){\n              // miss\n              centerlabel.text = 'Miss!';\n              life-=1;\n              hearts[life].remove();\n              whichturn=MISS_TURN;\n              turntimer=1000;\n            }\n            if(life===0){\n              // game over\n              centerlabel.text = 'Dead!';\n              whichturn=DEAD_TURN;\n              turntimer=2000;\n            }\n          }\n        }\n        if(actionlabel.text.length==0){\n          actionlabel.text = this.text;\n        }else{\n          actionlabel.text = actionlabel.text + ',' + this.text;\n        }\n        console.log(\"'\"+actionlabel.text+\"',\"+actionlabel.width);\n        //actionlabeltimer=500;\n      };\n      // Android端末使用時のタップ遅延対策。\n      // 同じ処理2度書くのは大変なのでonpointend()を呼び出し。\n      // 素早く連打した時に重複してしまう場合がある。普通に使う分には問題なさそう？\n      button9[i].onpointover = function(e){\n        if (!e.pointer.getPointing()&&chkAndroid){\n          self.onpointend();\n        }\n      };\n    }\n    \n    /*\n    button_ok=Button({\n      width: 90,         // 横サイズ\n      height: 190,        // 縦サイズ\n      fontSize: 32,       // 文字サイズ\n      fontColor: 'white', // 文字色\n      cornerRadius: 10,   // 角丸み\n      fill: 'skyblue',    // ボタン色\n      stroke: 'blue',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n      text: 'ok',     // 表示文字\n    }).addChildTo(uigroup);\n    button_ok.setPosition(550,850);\n    */\n    \n    button_pause=Button({\n      width: 90,         // 横サイズ\n      height: 90,        // 縦サイズ\n      fontSize: 32,       // 文字サイズ\n      fontColor: 'white', // 文字色\n      fontWeight:\"bold\",\n      cornerRadius: 10,   // 角丸み\n      fill: 'blue',    // ボタン色\n      stroke: 'black',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n//      text: 'pause',     // 表示文字\n      text: 'die',     // 表示文字\n    }).addChildTo(uigroup);\n    button_pause.setPosition(100,900);\n \n     button_pause.onpointend = function(){\n      // Add Pause\n      basescene = self;\n      self.app.replaceScene(GameOverScene());\n      //self.app.pushScene(PauseScene());\n    };\n\n    bgimg = Sprite('bg');\n    bgimg.addChildTo(spritegroup).setPosition(this.gridX.center(),this.gridY.center());\n    bgimg.scaleX = bgimg.scaleY = 2.0;\n\n    ninjaimg=[\n     Sprite('ninja1'),\n     Sprite('ninja2'),\n     Sprite('ninja3'),\n     Sprite('ninja4'),\n     ];\n    ninjaimg[0].addChildTo(spritegroup).setPosition(350,300).alpha=0;\n    ninjaimg[1].addChildTo(spritegroup).setPosition(350,350).alpha=0;\n    ninjaimg[2].addChildTo(spritegroup).setPosition(350,300).alpha=0;\n    ninjaimg[3].addChildTo(spritegroup).setPosition(350,300).alpha=0;\n  },\n\n  update:function(app){\n      key = app.keyboard;\n      //if(key.getKeyDown('up')) button9[0].onpointend();\n      //if(key.getKeyDown('left')) button9[1].onpointend();\n      //if(key.getKeyDown('right')) button9[2].onpointend();\n      //if(key.getKeyDown('down')) button9[3].onpointend();\n      if(key.getKeyDown('w')) button9[0].onpointend();\n      if(key.getKeyDown('a')) button9[1].onpointend();\n      if(key.getKeyDown('d')) button9[2].onpointend();\n      if(key.getKeyDown('s')) button9[3].onpointend();\n      //if(key.getKeyDown('enter')) button_ok.onpointend();\n      if(key.getKeyDown('escape')) button_pause.onpointend();\n \n      if(actionlabeltimer >0){\n        actionlabeltimer-= app.deltaTime;\n        if(actionlabeltimer <=0){\n          actionlabel.text = '';\n        }\n      }\n  }, // end of update:function(app)\n});\n\n\nphina.define('MainScene', {\n  superClass: 'phina.display.DisplayScene',\n \n  button_start : null,\n \n  init: function() {\n    this.superInit();\n    console.log(\"init at MainScene\");\n \n    spritegroup = DisplayElement().addChildTo(this);\n    lavelgroup = DisplayElement().addChildTo(this);\n    uigroup = DisplayElement().addChildTo(this);\n \n    centerlabel =Label({\n      fontSize:46,\n      fontWeight:\"bold\",\n      align:\"center\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"white\",\n      stroke:\"black\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    centerlabel.x = this.gridX.center();\n    centerlabel.y = this.gridY.center(-2);\n    centerlabel.text = TITLEJP;\n\n    actionlabel = Label({\n      fontSize:32,\n      fontWeight:\"bold\",\n      align:\"center\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"white\",\n      stroke:\"black\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    actionlabel.x = this.gridX.center();\n    actionlabel.y = this.gridY.center(-1);\n    actionlabel.text = TITLE;\n    \n    button_start=Button({\n      width: 240,         // 横サイズ\n      height: 80,        // 縦サイズ\n      fontSize: 32,       // 文字サイズ\n      fontColor: 'white', // 文字色\n      fontWeight:\"bold\",\n      cornerRadius: 10,   // 角丸み\n      fill: 'blue',    // ボタン色\n      stroke: 'black',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n      text: 'start',     // 表示文字\n    }).addChildTo(uigroup);\n    button_start.setPosition(this.gridX.center(+1),850);\n\n    if(maxscore>0){\n    \n      scorelabel = Label({\n        fontSize:50,\n        fontWeight:\"bold\",\n        align:\"left\",\n        baseline:\"bottom\",\n        padding:10,\n        fill:\"yellow\",\n        stroke:\"red\",\n        strokeWidth:10,\n        }).addChildTo(lavelgroup);\n      scorelabel.x = this.gridX.center()-220;\n      scorelabel.y = this.gridY.center(+2);\n  \n      scorelabel.text = 'max-score : '+maxscore;\n    }\n\n    var self = this;\n    button_start.onpointend = function(){\n      self.exit(\"SubScene\");\n    };\n    \n    var ninjatitle = Sprite('ninja6')\n    ninjatitle.addChildTo(spritegroup).setPosition(350,300);\n\n    var grailsprite=Sprite('holygrail');\n    grailsprite.addChildTo(spritegroup).setPosition(130,850);\n    grailsprite.rotation=-20;\n    grailsprite.setScale(0.8,0.8);\n\n  }, // end of init:function\n  update: function(app){\n      key = app.keyboard;\n      if(key.getKeyDown('enter')) button_start.onpointend();\n      \n    var p = Particle(100,750).addChildTo(spritegroup);\n    p.ondisappear = function() {\n      p.reset(100, 750);\n    }.bind(spritegroup);\n\n  }, // end of update:function\n});\n\n\n\nphina.define('SubScene', {\n  superClass: 'BaseScene',\n \n  init: function() {\n    this.superInit();\n    console.log(\"init at SubScene\");\n\n    life=3;\n    level=1;\n    maxcombo=0;\n    maxlevel=0;\n     \n    hearts = [];\n    x=500;\n    y=40;\n    for( let i=0 ; i < life ; i++ ){\n      hearts.push(HeartShape({\n      stroke: 'red',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n        }\n        ).addChildTo(this).setPosition(x+40*i, y));\n    }\n\n    whichturn=0;\n    centerlabel.text = 'Get ready!';\n    turntimer=2000;\n    createanswer(level);\n    score = 0;\n    combo = 0;\n    maxcombo = 0;\n    levellabel.text = 'level:'+level;\n    scorelabel.text = 'score:'+score;\n    combolabel.text = 'combo:'+combo;\n\n    var self = this;\n  },\n\n  update: function(app){\n    this.superMethod('update', app);\n    \n    if(turntimer>0){\n      turntimer-=app.deltaTime;\n      if(turntimer<=0){\n        switch(whichturn){\n          case READY_TURN:\n            centerlabel.text = 'Enemy turn!';\n            actionlabel.text = '';\n            whichturn = ENEMY_TURN;\n            \n            createanswer(1);\n            actionlabel.text = '';\n            turntimer=2000;\n            break;\n          case ENEMY_TURN:\n            if( answerindex < answers.length){\n              // 候補を表示\n              centerlabel.text = '['+answerindex+']'+b9lavels[answers[answerindex]];\n              if( answerindex>0){\n                button9[answers[answerindex-1]].fill = 'blue';\n                ninjaimg[answers[answerindex-1]].alpha=0;\n                ninjaimg[answers[answerindex]].alpha=0;\n              }\n              button9[answers[answerindex]].fill = 'red';\n              ninjaimg[answers[answerindex]].alpha=1;\n              answerindex++;\n              turntimer=500;\n            }else{\n              // 候補が終了\n              button9[answers[answerindex-1]].fill = 'blue';\n              ninjaimg[answers[answerindex-1]].alpha=0;\n              whichturn=2;\n              answerindex = 0;\n              centerlabel.text='Player turn!';\n              turntimer=1000;\n            }\n            break;\n          case PLAYER_TURN:\n            centerlabel.text = '';\n            break;\n          case SUCCESS_TURN:\n            centerlabel.text = 'Enemy turn!';\n            console.log(\"answerindex=\"+(answerindex-1));\n            console.log(\"answers[answerindex]=\"+answers[(answerindex-1)]);\n            ninjaimg[answers[(answerindex-1)]].alpha=0;\n            whichturn = ENEMY_TURN;\n            actionlabel.text = '';\n            createanswer(level+1);\n            turntimer=2000;\n            break;\n          case DEAD_TURN:\n            app.replaceScene(GameOverScene());\n            break;\n          case MISS_TURN:\n            centerlabel.text = 'Enemy turn!';\n            actionlabel.text = '';\n            createanswer(Math.ceil(level/2));\n            whichturn=ENEMY_TURN;\n            turntimer=2000;\n            break;\n        }\n      }\n    }\n  },\n  \n\n});\n\nphina.define('PauseScene', {\n  superClass: 'DisplayScene',\n  init: function() {\n    this.superInit();\n    console.log(\"init at PauseScene\");\n    this.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n\n    var self = this;\n    var button = Button({\n      text: 'Resume',\n    }).addChildTo(this);\n    button.setPosition(this.gridX.center(), this.gridY.center(-3));\n    button.onpush = function() {\n      // 自身を取り除く\n      self.exit();    \n    };\n\n  },\n});\n\n\nphina.define('GameOverScene', {\n  superClass: 'phina.display.DisplayScene',\n \n button_start : null,\n tweet_btn : null,\n \n  init: function() {\n    this.superInit();\n    console.log(\"init at GameOverScene\");\n    \n    spritegroup = DisplayElement().addChildTo(this);\n    lavelgroup = DisplayElement().addChildTo(this);\n    uigroup = DisplayElement().addChildTo(this);\n\n     centerlabel =Label({\n      fontSize:60,\n      fontWeight:\"bold\",\n      align:\"center\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"white\",\n      stroke:\"black\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    centerlabel.x = this.gridX.center();\n    centerlabel.y = this.gridY.center()-50;\n    centerlabel.text = 'GameOver!';\n\n    levellabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"red\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    levellabel.x = this.gridX.center()-240;\n    levellabel.y = this.gridY.center(+1)-50;\n\n    combolabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"red\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    combolabel.x = this.gridX.center()-240;\n    combolabel.y = this.gridY.center(+2)-50;\n\n    scorelabel = Label({\n      fontSize:50,\n      fontWeight:\"bold\",\n      align:\"left\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"yellow\",\n      stroke:\"red\",\n      strokeWidth:10,\n      }).addChildTo(lavelgroup);\n    scorelabel.x = this.gridX.center()-240;\n    scorelabel.y = this.gridY.center(+3)-50;\n\n    levellabel.text = 'max-level : '+maxlevel;\n    scorelabel.text = 'score : '+score;\n    combolabel.text = 'max-combo : '+maxcombo;\n\n    jokelabel = Label({\n      fontSize:30,\n      align:\"right\",\n      baseline:\"bottom\",\n      padding:10,\n      fill:\"black\",\n      text:'I got it!'\n      }).addChildTo(lavelgroup);\n    jokelabel.x = 300;\n    jokelabel.y = 60;\n    jokelabel.rotation = 10;\n\n \n\n    button_start=Button({\n      width: 240,         // 横サイズ\n      height: 80,        // 縦サイズ\n      fontSize: 32,       // 文字サイズ\n      fontColor: 'white', // 文字色\n      cornerRadius: 10,   // 角丸み\n      fontWeight:\"bold\",\n      fill: 'blue',    // ボタン色\n      stroke: 'black',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n      text: 'reset',     // 表示文字\n    }).addChildTo(uigroup);\n    button_start.setPosition(this.gridX.center(-3.5),900);\n\n    tweet_btn=Button({\n      width: 200,         // 横サイズ\n      height: 80,        // 縦サイズ\n      fontSize: 32,       // 文字サイズ\n      fontColor: 'white', // 文字色\n      cornerRadius: 10,   // 角丸み\n      fontWeight:\"bold\",\n      fill: 'blue',    // ボタン色\n      stroke: 'black',     // 枠色\n      strokeWidth: 4,     // 枠太さ\n      text: 'tweet',     // 表示文字\n    }).addChildTo(uigroup);\n    tweet_btn.setPosition(this.gridX.center(+2.5),900);\n    \n    var ninjasprite=Sprite('ninja5');\n    ninjasprite.addChildTo(spritegroup).setPosition(400,200);\n    var grailsprite=Sprite('holygrail');\n    grailsprite.addChildTo(spritegroup).setPosition(200,250);\n    grailsprite.rotation=-20;\n    grailsprite.setScale(0.8,0.8);\n\n\nvar textrect = RectangleShape({\n  width:700,\n  height:190,\n  fill:'black',\n  alpha:0.5,\n}).addChildTo(spritegroup);\ntextrect.setPosition(this.gridX.center(),740);\ntextrect.alpha=0;\ntextrect.tweener.fade(0,500).fade(0.8,2000).play();\n\nvar textlavel = Label({\n      fontSize:30,\n      align:\"center\",\n      baseline:\"middle\",\n      padding:10,\n      fill:\"white\",\n      }).addChildTo(lavelgroup);\n    textlavel.x = this.gridX.center();\n    textlavel.y = 740;\n    textlavel.text = '聖杯は突如現れたニンジャに奪われた。\\nあれ以来、トゥーレもニンジャも、私の\\n前に姿を見せていない。かつて私の手に\\nあった聖杯の行方は、杳として知れない。';\n\n    var self = this;\n    button_start.onpointend = function(){\n      actionlabel.text = '';\n      self.exit(\"MainScene\");\n    };\n    \n    tweet_btn.onpointend = function(){\n      var text = '{0}\\nMax Level:{1}\\nMax Combo:{2}\\nScore:{3}\\n'.format(TITLE, maxlevel, maxcombo, score);\n      var url = phina.social.Twitter.createURL({\n        text: text,\n        hashtags: [\"SCPFoundation\", \"AnmerkungDesArchaologen\",],\n        url: \"http://scp-jp.wikidot.com/tale-1921-jp-3\",\n      });\n      \n      // 新規ウィンドウで開く場合（OS・端末によっては制限があってダメかも？）\n      window.open(url, 'share window', 'width=480, height=320');\n      \n      // 新規タブで開く場合\n      //var childWindow = window.open('about:blank');\n      //childWindow.location.href = url;\n    };\n  }, // end of init:function\n\n  update: function(app){\n    key = app.keyboard;\n    if(key.getKeyDown('enter')) button_start.onpointend();\n\n    var p = Particle(160,150).addChildTo(this);\n    p.ondisappear = function() {\n      p.reset(160, 150);\n    }.bind(this);\n\n  }, // end of update:function\n\n});\n \n \nfunction createanswer(aLevel){\n  console.log(\"createanswer(\"+aLevel+\")\");\n  level = aLevel;\n  if(maxlevel<level){\n    maxlevel = level;\n  }\n  levellabel.text = 'level:'+level;\n  answerindex=0;\n  answers = [];\n\n  var pre=-1;\n  var temp;\n  switch (level) {\n    case 1:\n      answers.push(0);\n      break;\n    case 2:\n      answers.push(0);\n      answers.push(1);\n      break;\n    default:\n      for(let i=0 ; i < level ; i++){\n        temp = getRandomInt(BUTTON_MAX);\n        if(pre == temp){\n          temp = (pre+1)%BUTTON_MAX;\n        }\n        pre = temp;\n        answers.push(temp);\n      }\n      break;\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\n\n\nvar PARTICLE_MAX_NUM          = 10;  // 最大パーティクル数\nvar PARTICLE_COLOR_START      = 180;    // color angle の開始値\nvar PARTICLE_COLOR_END        = 30;   // color angle の終了値\nvar PARTICLE_VELOCITY_RANGE_X = 8;    // 速度の初期値の範囲 x\nvar PARTICLE_VELOCITY_RANGE_Y = 4;    // 速度の初期値の範囲 y\nvar PARTICLE_ACCELERATION_Y   = -0.3; // 加速度 y\nvar PARTICLE_SCALE            = 0.6;    // 初期スケール\nvar PARTICLE_SCALE_DOWN_SPEED = 0.025;// スケールダウンのスピード\n\nphina.define('Particle', {\n  superClass: 'CircleShape',\n  \n  init: function(x, y) {\n    this.superInit({\n      stroke: false,\n      radius: 64,\n    });\n    \n    this.blendMode = 'lighter';\n    \n    var grad = this.canvas.context.createRadialGradient(0, 0, 0, 0, 0, this.radius);\n    grad.addColorStop(0, 'hsla({0}, 75%, 50%, 0.5)'.format(Math.randint(PARTICLE_COLOR_START, PARTICLE_COLOR_END)));\n    grad.addColorStop(1, 'hsla({0}, 75%, 50%, 0.0)'.format(Math.randint(PARTICLE_COLOR_START, PARTICLE_COLOR_END)));\n\n    this.fill = grad;\n    \n    this.beginPosition = Vector2();\n    this.velocity = Vector2();\n    this.reset(x, y);\n  },\n\n  reset: function(x, y) {\n    this.beginPosition.set(x, y);\n    this.position.set(this.beginPosition.x, this.beginPosition.y);\n    this.velocity.set(\n      Math.randint(-PARTICLE_VELOCITY_RANGE_X, PARTICLE_VELOCITY_RANGE_X),\n      Math.randint(-PARTICLE_VELOCITY_RANGE_Y, PARTICLE_VELOCITY_RANGE_Y)\n      );\n    this.scaleX = this.scaleY = Math.randfloat(PARTICLE_SCALE*0.8, PARTICLE_SCALE*1.2);\n  },\n  \n  update: function() {\n    var tim=new Date().getTime()/30;\n    var a = 30;\n    this.position.add(this.velocity);\n    this.velocity.x += (this.beginPosition.x-this.x)/(this.radius/2);\n    this.velocity.y += PARTICLE_ACCELERATION_Y;\n    this.scaleX -= PARTICLE_SCALE_DOWN_SPEED;\n    this.scaleY -= PARTICLE_SCALE_DOWN_SPEED;\n    \n    if (this.scaleX < 0) {\n      this.flare('disappear');\n    }\n  }\n});\n\n</script>\n\n<style type=\"text/css\">\n@import url(http://scp-jp.wdfiles.com/local--files/japanese-syntax/scp-WikidotCss.css);\n\nbody {\n  padding:0px;\n  margin: 0px;\n  color: #FFFFFF;\n  background-color: #1a1a1a;\n}\n</style>\n</head>\n<body>\n<div id=\"page-content\">\n</div>\n</body>\n</html>\n[[/code]]\n\n</script>\n\n<style type=\"text/css\">\n@import url(http://scp-jp.wdfiles.com/local--files/japanese-syntax/scp-WikidotCss.css);\n\nbody {\n  padding:0px;\n  margin: 0px;\n  color: #FFFFFF;\n  background-color: #1a1a1a;\n}\n</style>\n</head>\n<body>\n<div id=\"page-content\">\n</div>\n</body>\n</html>\n[[/code]]\n--]",
  "tags": [
    "jp",
    "tale",
    "アートワーク",
    "インタラクティブ",
    "チームコン20",
    "無尽月導衆",
    "聖杯を仰ぐ翳"
  ],
  "author": "dr_toraya",
  "created_at": "2020-10-28T21:20:31+00:00",
  "updated_at": "2021-11-25T07:48:09+00:00",
  "rating": 66,
  "_site": "scp-jp",
  "_fullname": "tale-1921-jp-3"
}